//
// Generated by Bluespec Compiler, version 2019.01.beta1-60day (build 5e200f8fc, 2019-01-17)
//
// On Fri Mar  8 12:50:40 PST 2019
//
//
// Ports:
// Name                         I/O  size props
// RDY_set_verbosity              O     1 const
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1
// valid                          O     1
// addr                           O    32 reg
// word64                         O    64
// st_amo_val                     O    64
// exc                            O     1
// exc_code                       O     4 reg
// RDY_server_flush_request_put   O     1 reg
// RDY_server_flush_response_get  O     1
// RDY_tlb_flush                  O     1 const
// mem_master_awvalid             O     1
// mem_master_awaddr              O    64 reg
// mem_master_awprot              O     3 reg
// mem_master_wvalid              O     1
// mem_master_wdata               O    64 reg
// mem_master_wstrb               O     8 reg
// mem_master_bready              O     1
// mem_master_arvalid             O     1
// mem_master_araddr              O    64 reg
// mem_master_arprot              O     3 reg
// mem_master_rready              O     1
// near_mem_io_client_request_get  O   137 reg
// RDY_near_mem_io_client_request_get  O     1 reg
// RDY_near_mem_io_client_response_put  O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_verbosity_verbosity        I     4 reg
// req_op                         I     1
// req_f3                         I     3
// req_addr                       I    32
// req_st_value                   I    64 reg
// req_priv                       I     2 unused
// req_sstatus_SUM                I     1 unused
// req_mstatus_MXR                I     1 unused
// req_satp                       I    32 unused
// mem_master_awready             I     1
// mem_master_wready              I     1
// mem_master_bvalid              I     1
// mem_master_bresp               I     2 reg
// mem_master_arready             I     1
// mem_master_rvalid              I     1
// mem_master_rresp               I     2 reg
// mem_master_rdata               I    64 reg
// near_mem_io_client_response_put  I    66 reg
// EN_set_verbosity               I     1
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_req                         I     1
// EN_server_flush_request_put    I     1
// EN_server_flush_response_get   I     1
// EN_tlb_flush                   I     1 unused
// EN_near_mem_io_client_response_put  I     1
// EN_near_mem_io_client_request_get  I     1
//
// Combinational paths from inputs to outputs:
//   (mem_master_awready, mem_master_wready) -> valid
//   (mem_master_awready, mem_master_wready) -> word64
//   (mem_master_awready, mem_master_wready) -> st_amo_val
//   (mem_master_awready, mem_master_wready) -> mem_master_bready
//   EN_req -> mem_master_rready
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMMU_Cache(CLK,
		   RST_N,

		   set_verbosity_verbosity,
		   EN_set_verbosity,
		   RDY_set_verbosity,

		   EN_server_reset_request_put,
		   RDY_server_reset_request_put,

		   EN_server_reset_response_get,
		   RDY_server_reset_response_get,

		   req_op,
		   req_f3,
		   req_addr,
		   req_st_value,
		   req_priv,
		   req_sstatus_SUM,
		   req_mstatus_MXR,
		   req_satp,
		   EN_req,

		   valid,

		   addr,

		   word64,

		   st_amo_val,

		   exc,

		   exc_code,

		   EN_server_flush_request_put,
		   RDY_server_flush_request_put,

		   EN_server_flush_response_get,
		   RDY_server_flush_response_get,

		   EN_tlb_flush,
		   RDY_tlb_flush,

		   mem_master_awvalid,

		   mem_master_awaddr,

		   mem_master_awprot,

		   mem_master_awready,

		   mem_master_wvalid,

		   mem_master_wdata,

		   mem_master_wstrb,

		   mem_master_wready,

		   mem_master_bvalid,
		   mem_master_bresp,

		   mem_master_bready,

		   mem_master_arvalid,

		   mem_master_araddr,

		   mem_master_arprot,

		   mem_master_arready,

		   mem_master_rvalid,
		   mem_master_rresp,
		   mem_master_rdata,

		   mem_master_rready,

		   EN_near_mem_io_client_request_get,
		   near_mem_io_client_request_get,
		   RDY_near_mem_io_client_request_get,

		   near_mem_io_client_response_put,
		   EN_near_mem_io_client_response_put,
		   RDY_near_mem_io_client_response_put);
  parameter [0 : 0] dmem_not_imem = 1'b0;
  input  CLK;
  input  RST_N;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method req
  input  req_op;
  input  [2 : 0] req_f3;
  input  [31 : 0] req_addr;
  input  [63 : 0] req_st_value;
  input  [1 : 0] req_priv;
  input  req_sstatus_SUM;
  input  req_mstatus_MXR;
  input  [31 : 0] req_satp;
  input  EN_req;

  // value method valid
  output valid;

  // value method addr
  output [31 : 0] addr;

  // value method word64
  output [63 : 0] word64;

  // value method st_amo_val
  output [63 : 0] st_amo_val;

  // value method exc
  output exc;

  // value method exc_code
  output [3 : 0] exc_code;

  // action method server_flush_request_put
  input  EN_server_flush_request_put;
  output RDY_server_flush_request_put;

  // action method server_flush_response_get
  input  EN_server_flush_response_get;
  output RDY_server_flush_response_get;

  // action method tlb_flush
  input  EN_tlb_flush;
  output RDY_tlb_flush;

  // value method mem_master_m_awvalid
  output mem_master_awvalid;

  // value method mem_master_m_awaddr
  output [63 : 0] mem_master_awaddr;

  // value method mem_master_m_awprot
  output [2 : 0] mem_master_awprot;

  // value method mem_master_m_awuser

  // action method mem_master_m_awready
  input  mem_master_awready;

  // value method mem_master_m_wvalid
  output mem_master_wvalid;

  // value method mem_master_m_wdata
  output [63 : 0] mem_master_wdata;

  // value method mem_master_m_wstrb
  output [7 : 0] mem_master_wstrb;

  // action method mem_master_m_wready
  input  mem_master_wready;

  // action method mem_master_m_bvalid
  input  mem_master_bvalid;
  input  [1 : 0] mem_master_bresp;

  // value method mem_master_m_bready
  output mem_master_bready;

  // value method mem_master_m_arvalid
  output mem_master_arvalid;

  // value method mem_master_m_araddr
  output [63 : 0] mem_master_araddr;

  // value method mem_master_m_arprot
  output [2 : 0] mem_master_arprot;

  // value method mem_master_m_aruser

  // action method mem_master_m_arready
  input  mem_master_arready;

  // action method mem_master_m_rvalid
  input  mem_master_rvalid;
  input  [1 : 0] mem_master_rresp;
  input  [63 : 0] mem_master_rdata;

  // value method mem_master_m_rready
  output mem_master_rready;

  // actionvalue method near_mem_io_client_request_get
  input  EN_near_mem_io_client_request_get;
  output [136 : 0] near_mem_io_client_request_get;
  output RDY_near_mem_io_client_request_get;

  // action method near_mem_io_client_response_put
  input  [65 : 0] near_mem_io_client_response_put;
  input  EN_near_mem_io_client_response_put;
  output RDY_near_mem_io_client_response_put;

  // signals for module outputs
  reg [63 : 0] word64;
  wire [136 : 0] near_mem_io_client_request_get;
  wire [63 : 0] mem_master_araddr,
		mem_master_awaddr,
		mem_master_wdata,
		st_amo_val;
  wire [31 : 0] addr;
  wire [7 : 0] mem_master_wstrb;
  wire [3 : 0] exc_code;
  wire [2 : 0] mem_master_arprot, mem_master_awprot;
  wire RDY_near_mem_io_client_request_get,
       RDY_near_mem_io_client_response_put,
       RDY_server_flush_request_put,
       RDY_server_flush_response_get,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_set_verbosity,
       RDY_tlb_flush,
       exc,
       mem_master_arvalid,
       mem_master_awvalid,
       mem_master_bready,
       mem_master_rready,
       mem_master_wvalid,
       valid;

  // inlined wires
  wire [3 : 0] ctr_wr_rsps_pending_crg$port0__write_1,
	       ctr_wr_rsps_pending_crg$port1__write_1,
	       ctr_wr_rsps_pending_crg$port2__read,
	       ctr_wr_rsps_pending_crg$port3__read;
  wire ctr_wr_rsps_pending_crg$EN_port0__write,
       ctr_wr_rsps_pending_crg$EN_port2__write,
       dw_valid$whas,
       master_xactor_crg_rd_addr_full$EN_port0__write,
       master_xactor_crg_rd_addr_full$EN_port1__write,
       master_xactor_crg_rd_addr_full$EN_port2__write,
       master_xactor_crg_rd_addr_full$port1__read,
       master_xactor_crg_rd_addr_full$port2__read,
       master_xactor_crg_rd_addr_full$port3__read,
       master_xactor_crg_rd_data_full$EN_port0__write,
       master_xactor_crg_rd_data_full$EN_port1__write,
       master_xactor_crg_rd_data_full$EN_port2__write,
       master_xactor_crg_rd_data_full$port1__read,
       master_xactor_crg_rd_data_full$port2__read,
       master_xactor_crg_rd_data_full$port3__read,
       master_xactor_crg_wr_addr_full$EN_port0__write,
       master_xactor_crg_wr_addr_full$EN_port1__write,
       master_xactor_crg_wr_addr_full$EN_port2__write,
       master_xactor_crg_wr_addr_full$port1__read,
       master_xactor_crg_wr_addr_full$port2__read,
       master_xactor_crg_wr_addr_full$port3__read,
       master_xactor_crg_wr_data_full$EN_port0__write,
       master_xactor_crg_wr_data_full$EN_port1__write,
       master_xactor_crg_wr_data_full$EN_port2__write,
       master_xactor_crg_wr_data_full$port1__read,
       master_xactor_crg_wr_data_full$port2__read,
       master_xactor_crg_wr_data_full$port3__read,
       master_xactor_crg_wr_resp_full$EN_port0__write,
       master_xactor_crg_wr_resp_full$EN_port2__write,
       master_xactor_crg_wr_resp_full$port1__read,
       master_xactor_crg_wr_resp_full$port2__read,
       master_xactor_crg_wr_resp_full$port3__read;

  // register cfg_verbosity
  reg [3 : 0] cfg_verbosity;
  wire [3 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register ctr_wr_rsps_pending_crg
  reg [3 : 0] ctr_wr_rsps_pending_crg;
  wire [3 : 0] ctr_wr_rsps_pending_crg$D_IN;
  wire ctr_wr_rsps_pending_crg$EN;

  // register master_xactor_crg_rd_addr_full
  reg master_xactor_crg_rd_addr_full;
  wire master_xactor_crg_rd_addr_full$D_IN, master_xactor_crg_rd_addr_full$EN;

  // register master_xactor_crg_rd_data_full
  reg master_xactor_crg_rd_data_full;
  wire master_xactor_crg_rd_data_full$D_IN, master_xactor_crg_rd_data_full$EN;

  // register master_xactor_crg_wr_addr_full
  reg master_xactor_crg_wr_addr_full;
  wire master_xactor_crg_wr_addr_full$D_IN, master_xactor_crg_wr_addr_full$EN;

  // register master_xactor_crg_wr_data_full
  reg master_xactor_crg_wr_data_full;
  wire master_xactor_crg_wr_data_full$D_IN, master_xactor_crg_wr_data_full$EN;

  // register master_xactor_crg_wr_resp_full
  reg master_xactor_crg_wr_resp_full;
  wire master_xactor_crg_wr_resp_full$D_IN, master_xactor_crg_wr_resp_full$EN;

  // register master_xactor_rg_rd_addr
  reg [66 : 0] master_xactor_rg_rd_addr;
  reg [66 : 0] master_xactor_rg_rd_addr$D_IN;
  wire master_xactor_rg_rd_addr$EN;

  // register master_xactor_rg_rd_data
  reg [65 : 0] master_xactor_rg_rd_data;
  wire [65 : 0] master_xactor_rg_rd_data$D_IN;
  wire master_xactor_rg_rd_data$EN;

  // register master_xactor_rg_wr_addr
  reg [66 : 0] master_xactor_rg_wr_addr;
  wire [66 : 0] master_xactor_rg_wr_addr$D_IN;
  wire master_xactor_rg_wr_addr$EN;

  // register master_xactor_rg_wr_data
  reg [71 : 0] master_xactor_rg_wr_data;
  wire [71 : 0] master_xactor_rg_wr_data$D_IN;
  wire master_xactor_rg_wr_data$EN;

  // register master_xactor_rg_wr_resp
  reg [1 : 0] master_xactor_rg_wr_resp;
  wire [1 : 0] master_xactor_rg_wr_resp$D_IN;
  wire master_xactor_rg_wr_resp$EN;

  // register rg_addr
  reg [31 : 0] rg_addr;
  wire [31 : 0] rg_addr$D_IN;
  wire rg_addr$EN;

  // register rg_cset_in_cache
  reg [6 : 0] rg_cset_in_cache;
  wire [6 : 0] rg_cset_in_cache$D_IN;
  wire rg_cset_in_cache$EN;

  // register rg_error_during_refill
  reg rg_error_during_refill;
  wire rg_error_during_refill$D_IN, rg_error_during_refill$EN;

  // register rg_exc_code
  reg [3 : 0] rg_exc_code;
  reg [3 : 0] rg_exc_code$D_IN;
  wire rg_exc_code$EN;

  // register rg_f3
  reg [2 : 0] rg_f3;
  wire [2 : 0] rg_f3$D_IN;
  wire rg_f3$EN;

  // register rg_ld_val
  reg [63 : 0] rg_ld_val;
  wire [63 : 0] rg_ld_val$D_IN;
  wire rg_ld_val$EN;

  // register rg_lower_word32
  reg [31 : 0] rg_lower_word32;
  wire [31 : 0] rg_lower_word32$D_IN;
  wire rg_lower_word32$EN;

  // register rg_lower_word32_full
  reg rg_lower_word32_full;
  wire rg_lower_word32_full$D_IN, rg_lower_word32_full$EN;

  // register rg_op
  reg rg_op;
  wire rg_op$D_IN, rg_op$EN;

  // register rg_pa
  reg [31 : 0] rg_pa;
  wire [31 : 0] rg_pa$D_IN;
  wire rg_pa$EN;

  // register rg_pte_pa
  reg [31 : 0] rg_pte_pa;
  wire [31 : 0] rg_pte_pa$D_IN;
  wire rg_pte_pa$EN;

  // register rg_req_byte_in_cline
  reg [63 : 0] rg_req_byte_in_cline;
  wire [63 : 0] rg_req_byte_in_cline$D_IN;
  wire rg_req_byte_in_cline$EN;

  // register rg_requesting_cline
  reg rg_requesting_cline;
  reg rg_requesting_cline$D_IN;
  wire rg_requesting_cline$EN;

  // register rg_st_amo_val
  reg [63 : 0] rg_st_amo_val;
  wire [63 : 0] rg_st_amo_val$D_IN;
  wire rg_st_amo_val$EN;

  // register rg_state
  reg [3 : 0] rg_state;
  reg [3 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // register rg_word64_set_in_cache
  reg [8 : 0] rg_word64_set_in_cache;
  wire [8 : 0] rg_word64_set_in_cache$D_IN;
  wire rg_word64_set_in_cache$EN;

  // ports of submodule f_near_mem_io_reqs
  wire [136 : 0] f_near_mem_io_reqs$D_IN, f_near_mem_io_reqs$D_OUT;
  wire f_near_mem_io_reqs$CLR,
       f_near_mem_io_reqs$DEQ,
       f_near_mem_io_reqs$EMPTY_N,
       f_near_mem_io_reqs$ENQ,
       f_near_mem_io_reqs$FULL_N;

  // ports of submodule f_near_mem_io_rsps
  wire [65 : 0] f_near_mem_io_rsps$D_IN, f_near_mem_io_rsps$D_OUT;
  wire f_near_mem_io_rsps$CLR,
       f_near_mem_io_rsps$DEQ,
       f_near_mem_io_rsps$EMPTY_N,
       f_near_mem_io_rsps$ENQ,
       f_near_mem_io_rsps$FULL_N;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$D_IN,
       f_reset_reqs$D_OUT,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$D_IN,
       f_reset_rsps$D_OUT,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule ram_state_and_ctag_cset
  wire [22 : 0] ram_state_and_ctag_cset$DIA,
		ram_state_and_ctag_cset$DIB,
		ram_state_and_ctag_cset$DOB;
  wire [6 : 0] ram_state_and_ctag_cset$ADDRA, ram_state_and_ctag_cset$ADDRB;
  wire ram_state_and_ctag_cset$ENA,
       ram_state_and_ctag_cset$ENB,
       ram_state_and_ctag_cset$WEA,
       ram_state_and_ctag_cset$WEB;

  // ports of submodule ram_word64_set
  reg [63 : 0] ram_word64_set$DIB;
  reg [8 : 0] ram_word64_set$ADDRB;
  wire [63 : 0] ram_word64_set$DIA, ram_word64_set$DOB;
  wire [8 : 0] ram_word64_set$ADDRA;
  wire ram_word64_set$ENA,
       ram_word64_set$ENB,
       ram_word64_set$WEA,
       ram_word64_set$WEB;

  // ports of submodule soc_map
  wire [63 : 0] soc_map$m_is_IO_addr_addr,
		soc_map$m_is_mem_addr_addr,
		soc_map$m_is_near_mem_IO_addr_addr;
  wire soc_map$m_is_IO_addr, soc_map$m_is_near_mem_IO_addr;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_ST_AMO_response,
       CAN_FIRE_RL_rl_cache_refill_req_loop,
       CAN_FIRE_RL_rl_cache_refill_rsps_loop,
       CAN_FIRE_RL_rl_discard_write_rsp,
       CAN_FIRE_RL_rl_drive_exception_rsp,
       CAN_FIRE_RL_rl_io_near_mem_read_req,
       CAN_FIRE_RL_rl_io_near_mem_read_rsp,
       CAN_FIRE_RL_rl_io_near_mem_write_req,
       CAN_FIRE_RL_rl_io_near_mem_write_rsp,
       CAN_FIRE_RL_rl_io_read_req,
       CAN_FIRE_RL_rl_io_read_rsp,
       CAN_FIRE_RL_rl_io_write_req,
       CAN_FIRE_RL_rl_maintain_io_read_rsp,
       CAN_FIRE_RL_rl_probe_and_immed_rsp,
       CAN_FIRE_RL_rl_rereq,
       CAN_FIRE_RL_rl_reset,
       CAN_FIRE_RL_rl_start_cache_refill,
       CAN_FIRE_RL_rl_start_reset,
       CAN_FIRE_mem_master_m_arready,
       CAN_FIRE_mem_master_m_awready,
       CAN_FIRE_mem_master_m_bvalid,
       CAN_FIRE_mem_master_m_rvalid,
       CAN_FIRE_mem_master_m_wready,
       CAN_FIRE_near_mem_io_client_request_get,
       CAN_FIRE_near_mem_io_client_response_put,
       CAN_FIRE_req,
       CAN_FIRE_server_flush_request_put,
       CAN_FIRE_server_flush_response_get,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_tlb_flush,
       WILL_FIRE_RL_rl_ST_AMO_response,
       WILL_FIRE_RL_rl_cache_refill_req_loop,
       WILL_FIRE_RL_rl_cache_refill_rsps_loop,
       WILL_FIRE_RL_rl_discard_write_rsp,
       WILL_FIRE_RL_rl_drive_exception_rsp,
       WILL_FIRE_RL_rl_io_near_mem_read_req,
       WILL_FIRE_RL_rl_io_near_mem_read_rsp,
       WILL_FIRE_RL_rl_io_near_mem_write_req,
       WILL_FIRE_RL_rl_io_near_mem_write_rsp,
       WILL_FIRE_RL_rl_io_read_req,
       WILL_FIRE_RL_rl_io_read_rsp,
       WILL_FIRE_RL_rl_io_write_req,
       WILL_FIRE_RL_rl_maintain_io_read_rsp,
       WILL_FIRE_RL_rl_probe_and_immed_rsp,
       WILL_FIRE_RL_rl_rereq,
       WILL_FIRE_RL_rl_reset,
       WILL_FIRE_RL_rl_start_cache_refill,
       WILL_FIRE_RL_rl_start_reset,
       WILL_FIRE_mem_master_m_arready,
       WILL_FIRE_mem_master_m_awready,
       WILL_FIRE_mem_master_m_bvalid,
       WILL_FIRE_mem_master_m_rvalid,
       WILL_FIRE_mem_master_m_wready,
       WILL_FIRE_near_mem_io_client_request_get,
       WILL_FIRE_near_mem_io_client_response_put,
       WILL_FIRE_req,
       WILL_FIRE_server_flush_request_put,
       WILL_FIRE_server_flush_response_get,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_tlb_flush;

  // inputs to muxes for submodule ports
  reg [63 : 0] MUX_dw_output_ld_val$wset_1__VAL_1,
	       MUX_dw_output_ld_val$wset_1__VAL_2,
	       MUX_dw_output_ld_val$wset_1__VAL_3,
	       MUX_dw_output_ld_val$wset_1__VAL_5;
  wire [136 : 0] MUX_f_near_mem_io_reqs$enq_1__VAL_1,
		 MUX_f_near_mem_io_reqs$enq_1__VAL_2;
  wire [71 : 0] MUX_master_xactor_rg_wr_data$write_1__VAL_1,
		MUX_master_xactor_rg_wr_data$write_1__VAL_2;
  wire [66 : 0] MUX_master_xactor_rg_rd_addr$write_1__VAL_1,
		MUX_master_xactor_rg_rd_addr$write_1__VAL_2,
		MUX_master_xactor_rg_rd_addr$write_1__VAL_3,
		MUX_master_xactor_rg_wr_addr$write_1__VAL_1,
		MUX_master_xactor_rg_wr_addr$write_1__VAL_2;
  wire [63 : 0] MUX_rg_req_byte_in_cline$write_1__VAL_1;
  wire [22 : 0] MUX_ram_state_and_ctag_cset$a_put_3__VAL_1;
  wire [8 : 0] MUX_ram_word64_set$b_put_2__VAL_2,
	       MUX_ram_word64_set$b_put_2__VAL_4;
  wire [6 : 0] MUX_rg_cset_in_cache$write_1__VAL_1;
  wire [3 : 0] MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1,
	       MUX_rg_exc_code$write_1__VAL_1,
	       MUX_rg_state$write_1__VAL_10,
	       MUX_rg_state$write_1__VAL_2,
	       MUX_rg_state$write_1__VAL_4,
	       MUX_rg_state$write_1__VAL_6,
	       MUX_rg_state$write_1__VAL_7;
  wire MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1,
       MUX_dw_output_ld_val$wset_1__SEL_2,
       MUX_dw_output_ld_val$wset_1__SEL_3,
       MUX_dw_valid$wset_1__SEL_1,
       MUX_ram_state_and_ctag_cset$b_put_1__SEL_1,
       MUX_ram_word64_set$a_put_1__SEL_1,
       MUX_ram_word64_set$b_put_1__SEL_2,
       MUX_rg_error_during_refill$write_1__SEL_1,
       MUX_rg_exc_code$write_1__SEL_1,
       MUX_rg_exc_code$write_1__SEL_2,
       MUX_rg_exc_code$write_1__SEL_4,
       MUX_rg_state$write_1__SEL_1,
       MUX_rg_state$write_1__SEL_13,
       MUX_rg_state$write_1__SEL_3,
       MUX_rg_state$write_1__SEL_6,
       MUX_rg_state$write_1__SEL_7;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h3846;
  reg [31 : 0] v__h3947;
  reg [31 : 0] v__h18951;
  reg [31 : 0] v__h19136;
  reg [31 : 0] v__h19538;
  reg [31 : 0] v__h19645;
  reg [31 : 0] v__h19926;
  reg [31 : 0] v__h21113;
  reg [31 : 0] v__h21255;
  reg [31 : 0] v__h3481;
  reg [31 : 0] v__h15983;
  reg [31 : 0] v__h4096;
  reg [31 : 0] v__h14839;
  reg [31 : 0] v__h12536;
  reg [31 : 0] v__h16133;
  reg [31 : 0] v__h16380;
  reg [31 : 0] v__h18102;
  reg [31 : 0] v__h18267;
  reg [31 : 0] v__h18666;
  reg [31 : 0] v__h18773;
  reg [31 : 0] v__h20448;
  reg [31 : 0] v__h20593;
  reg [31 : 0] v__h22235;
  reg [31 : 0] v__h15763;
  reg [31 : 0] v__h21848;
  reg [31 : 0] v__h21809;
  reg [31 : 0] v__h22229;
  reg [31 : 0] v__h3475;
  reg [31 : 0] v__h3840;
  reg [31 : 0] v__h3941;
  reg [31 : 0] v__h4090;
  reg [31 : 0] v__h12530;
  reg [31 : 0] v__h14833;
  reg [31 : 0] v__h15757;
  reg [31 : 0] v__h15977;
  reg [31 : 0] v__h16127;
  reg [31 : 0] v__h16374;
  reg [31 : 0] v__h18096;
  reg [31 : 0] v__h18261;
  reg [31 : 0] v__h18660;
  reg [31 : 0] v__h18767;
  reg [31 : 0] v__h18945;
  reg [31 : 0] v__h19130;
  reg [31 : 0] v__h19532;
  reg [31 : 0] v__h19639;
  reg [31 : 0] v__h19920;
  reg [31 : 0] v__h20442;
  reg [31 : 0] v__h20587;
  reg [31 : 0] v__h21107;
  reg [31 : 0] v__h21249;
  reg [31 : 0] v__h21803;
  reg [31 : 0] v__h21842;
  // synopsys translate_on

  // remaining internal signals
  reg [63 : 0] CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q24,
	       CASE_rg_addr_BITS_2_TO_0_0x0_result2357_0x4_re_ETC__q25,
	       CASE_rg_addr_BITS_2_TO_0_0x0_result2424_0x4_re_ETC__q26,
	       IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_0_CON_ETC___d254,
	       IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_0_CON_ETC___d275,
	       IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_SEXT__ETC___d237,
	       IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_SEXT__ETC___d266,
	       IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_ram_w_ETC___d119,
	       IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_ram_w_ETC___d129,
	       IF_rg_f3_8_EQ_0b0_9_THEN_IF_rg_addr_7_BITS_2_T_ETC___d140,
	       mem_req_wr_data_wdata__h14493,
	       value__h21173;
  reg [7 : 0] mem_req_wr_data_wstrb__h14494, req_wstrb__h20756;
  wire [63 : 0] _theResult___fst__h14611,
		_theResult___fst__h20896,
		cline_fabric_addr__h15817,
		io_req_wr_addr_awaddr__h20047,
		mem_req_wr_addr_awaddr__h14382,
		result__h11653,
		result__h11681,
		result__h11709,
		result__h11737,
		result__h11765,
		result__h11793,
		result__h11821,
		result__h11866,
		result__h11894,
		result__h11922,
		result__h11950,
		result__h11978,
		result__h12006,
		result__h12034,
		result__h12062,
		result__h12107,
		result__h12135,
		result__h12163,
		result__h12191,
		result__h12232,
		result__h12260,
		result__h12288,
		result__h12316,
		result__h12357,
		result__h12385,
		result__h12424,
		result__h12452,
		result__h18483,
		result__h18510,
		result__h18536,
		result__h18562,
		result__h18588,
		result__h18614,
		result__h19355,
		result__h19382,
		result__h19408,
		result__h19434,
		result__h19460,
		result__h19486,
		result__h19738,
		result__h19765,
		result__h19792,
		result__h19819,
		result__h19846,
		result__h19873,
		result__h5297,
		value__h21171,
		word64__h5090,
		y__h5333;
  wire [31 : 0] cline_addr__h15816,
		f_near_mem_io_rspsD_OUT_BITS_31_TO_0__q8,
		master_xactor_rg_rd_data_BITS_31_TO_0__q7,
		rg_ld_val_BITS_31_TO_0__q9,
		word64090_BITS_31_TO_0__q12,
		word64090_BITS_63_TO_32__q19,
		x__h14408,
		x__h20072;
  wire [21 : 0] pa_ctag__h4948;
  wire [15 : 0] f_near_mem_io_rspsD_OUT_BITS_15_TO_0__q5,
		master_xactor_rg_rd_data_BITS_15_TO_0__q4,
		rg_ld_val_BITS_15_TO_0__q6,
		word64090_BITS_15_TO_0__q11,
		word64090_BITS_31_TO_16__q15,
		word64090_BITS_47_TO_32__q18,
		word64090_BITS_63_TO_48__q22;
  wire [7 : 0] f_near_mem_io_rspsD_OUT_BITS_7_TO_0__q2,
	       master_xactor_rg_rd_data_BITS_7_TO_0__q1,
	       rg_ld_val_BITS_7_TO_0__q3,
	       strobe64__h14610,
	       strobe64__h14653,
	       strobe64__h14676,
	       strobe64__h20895,
	       strobe64__h20938,
	       strobe64__h20961,
	       word64090_BITS_15_TO_8__q13,
	       word64090_BITS_23_TO_16__q14,
	       word64090_BITS_31_TO_24__q16,
	       word64090_BITS_39_TO_32__q17,
	       word64090_BITS_47_TO_40__q20,
	       word64090_BITS_55_TO_48__q21,
	       word64090_BITS_63_TO_56__q23,
	       word64090_BITS_7_TO_0__q10;
  wire [5 : 0] shift_bits__h14391, shift_bits__h20768;
  wire [3 : 0] access_exc_code__h3039, b__h15106;
  wire NOT_cfg_verbosity_read__0_ULE_1_1___d12,
       NOT_cfg_verbosity_read__0_ULE_2_26___d327,
       NOT_req_f3_BITS_1_TO_0_47_EQ_0b0_48_49_AND_NOT_ETC___d568,
       NOT_rg_op_0_1_AND_ram_state_and_ctag_cset_b_re_ETC___d295,
       NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d180,
       NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d76,
       ram_state_and_ctag_cset_b_read__8_BITS_21_TO_0_ETC___d65,
       req_f3_BITS_1_TO_0_47_EQ_0b0_48_OR_req_f3_BITS_ETC___d577,
       rg_op_0_AND_ram_state_and_ctag_cset_b_read__8__ETC___d142,
       soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8_9_OR_ETC___d69;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get =
	     !f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get =
	     !f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method req
  assign CAN_FIRE_req = 1'd1 ;
  assign WILL_FIRE_req = EN_req ;

  // value method valid
  assign valid = dw_valid$whas ;

  // value method addr
  assign addr = rg_addr ;

  // value method word64
  always@(MUX_dw_valid$wset_1__SEL_1 or
	  MUX_dw_output_ld_val$wset_1__VAL_1 or
	  MUX_dw_output_ld_val$wset_1__SEL_2 or
	  MUX_dw_output_ld_val$wset_1__VAL_2 or
	  MUX_dw_output_ld_val$wset_1__SEL_3 or
	  MUX_dw_output_ld_val$wset_1__VAL_3 or
	  WILL_FIRE_RL_rl_ST_AMO_response or
	  rg_ld_val or
	  WILL_FIRE_RL_rl_maintain_io_read_rsp or
	  MUX_dw_output_ld_val$wset_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dw_valid$wset_1__SEL_1: word64 = MUX_dw_output_ld_val$wset_1__VAL_1;
      MUX_dw_output_ld_val$wset_1__SEL_2:
	  word64 = MUX_dw_output_ld_val$wset_1__VAL_2;
      MUX_dw_output_ld_val$wset_1__SEL_3:
	  word64 = MUX_dw_output_ld_val$wset_1__VAL_3;
      WILL_FIRE_RL_rl_ST_AMO_response: word64 = rg_ld_val;
      WILL_FIRE_RL_rl_maintain_io_read_rsp:
	  word64 = MUX_dw_output_ld_val$wset_1__VAL_5;
      default: word64 = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end

  // value method st_amo_val
  assign st_amo_val =
	     MUX_dw_output_ld_val$wset_1__SEL_3 ? 64'd0 : rg_st_amo_val ;

  // value method exc
  assign exc = rg_state == 4'd4 ;

  // value method exc_code
  assign exc_code = rg_exc_code ;

  // action method server_flush_request_put
  assign RDY_server_flush_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_flush_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_flush_request_put = EN_server_flush_request_put ;

  // action method server_flush_response_get
  assign RDY_server_flush_response_get =
	     f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_flush_response_get =
	     f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_flush_response_get = EN_server_flush_response_get ;

  // action method tlb_flush
  assign RDY_tlb_flush = 1'd1 ;
  assign CAN_FIRE_tlb_flush = 1'd1 ;
  assign WILL_FIRE_tlb_flush = EN_tlb_flush ;

  // value method mem_master_m_awvalid
  assign mem_master_awvalid =
	     !master_xactor_crg_wr_addr_full$EN_port0__write &&
	     master_xactor_crg_wr_addr_full ;

  // value method mem_master_m_awaddr
  assign mem_master_awaddr = master_xactor_rg_wr_addr[66:3] ;

  // value method mem_master_m_awprot
  assign mem_master_awprot = master_xactor_rg_wr_addr[2:0] ;

  // action method mem_master_m_awready
  assign CAN_FIRE_mem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_awready = 1'd1 ;

  // value method mem_master_m_wvalid
  assign mem_master_wvalid =
	     !master_xactor_crg_wr_data_full$EN_port0__write &&
	     master_xactor_crg_wr_data_full ;

  // value method mem_master_m_wdata
  assign mem_master_wdata = master_xactor_rg_wr_data[71:8] ;

  // value method mem_master_m_wstrb
  assign mem_master_wstrb = master_xactor_rg_wr_data[7:0] ;

  // action method mem_master_m_wready
  assign CAN_FIRE_mem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_wready = 1'd1 ;

  // action method mem_master_m_bvalid
  assign CAN_FIRE_mem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_mem_master_m_bvalid = 1'd1 ;

  // value method mem_master_m_bready
  assign mem_master_bready = !master_xactor_crg_wr_resp_full$port2__read ;

  // value method mem_master_m_arvalid
  assign mem_master_arvalid =
	     !master_xactor_crg_rd_addr_full$EN_port0__write &&
	     master_xactor_crg_rd_addr_full ;

  // value method mem_master_m_araddr
  assign mem_master_araddr = master_xactor_rg_rd_addr[66:3] ;

  // value method mem_master_m_arprot
  assign mem_master_arprot = master_xactor_rg_rd_addr[2:0] ;

  // action method mem_master_m_arready
  assign CAN_FIRE_mem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_arready = 1'd1 ;

  // action method mem_master_m_rvalid
  assign CAN_FIRE_mem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_mem_master_m_rvalid = 1'd1 ;

  // value method mem_master_m_rready
  assign mem_master_rready = !master_xactor_crg_rd_data_full$port2__read ;

  // actionvalue method near_mem_io_client_request_get
  assign near_mem_io_client_request_get = f_near_mem_io_reqs$D_OUT ;
  assign RDY_near_mem_io_client_request_get = f_near_mem_io_reqs$EMPTY_N ;
  assign CAN_FIRE_near_mem_io_client_request_get =
	     f_near_mem_io_reqs$EMPTY_N ;
  assign WILL_FIRE_near_mem_io_client_request_get =
	     EN_near_mem_io_client_request_get ;

  // action method near_mem_io_client_response_put
  assign RDY_near_mem_io_client_response_put = f_near_mem_io_rsps$FULL_N ;
  assign CAN_FIRE_near_mem_io_client_response_put =
	     f_near_mem_io_rsps$FULL_N ;
  assign WILL_FIRE_near_mem_io_client_response_put =
	     EN_near_mem_io_client_response_put ;

  // submodule f_near_mem_io_reqs
  FIFO2 #(.width(32'd137), .guarded(32'd1)) f_near_mem_io_reqs(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(f_near_mem_io_reqs$D_IN),
							       .ENQ(f_near_mem_io_reqs$ENQ),
							       .DEQ(f_near_mem_io_reqs$DEQ),
							       .CLR(f_near_mem_io_reqs$CLR),
							       .D_OUT(f_near_mem_io_reqs$D_OUT),
							       .FULL_N(f_near_mem_io_reqs$FULL_N),
							       .EMPTY_N(f_near_mem_io_reqs$EMPTY_N));

  // submodule f_near_mem_io_rsps
  FIFO2 #(.width(32'd66), .guarded(32'd1)) f_near_mem_io_rsps(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(f_near_mem_io_rsps$D_IN),
							      .ENQ(f_near_mem_io_rsps$ENQ),
							      .DEQ(f_near_mem_io_rsps$DEQ),
							      .CLR(f_near_mem_io_rsps$CLR),
							      .D_OUT(f_near_mem_io_rsps$D_OUT),
							      .FULL_N(f_near_mem_io_rsps$FULL_N),
							      .EMPTY_N(f_near_mem_io_rsps$EMPTY_N));

  // submodule f_reset_reqs
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_reqs(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_reqs$D_IN),
						       .ENQ(f_reset_reqs$ENQ),
						       .DEQ(f_reset_reqs$DEQ),
						       .CLR(f_reset_reqs$CLR),
						       .D_OUT(f_reset_reqs$D_OUT),
						       .FULL_N(f_reset_reqs$FULL_N),
						       .EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_rsps
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_rsps(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_rsps$D_IN),
						       .ENQ(f_reset_rsps$ENQ),
						       .DEQ(f_reset_rsps$DEQ),
						       .CLR(f_reset_rsps$CLR),
						       .D_OUT(f_reset_rsps$D_OUT),
						       .FULL_N(f_reset_rsps$FULL_N),
						       .EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule ram_state_and_ctag_cset
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd23),
	  .MEMSIZE(8'd128)) ram_state_and_ctag_cset(.CLKA(CLK),
						    .CLKB(CLK),
						    .ADDRA(ram_state_and_ctag_cset$ADDRA),
						    .ADDRB(ram_state_and_ctag_cset$ADDRB),
						    .DIA(ram_state_and_ctag_cset$DIA),
						    .DIB(ram_state_and_ctag_cset$DIB),
						    .WEA(ram_state_and_ctag_cset$WEA),
						    .WEB(ram_state_and_ctag_cset$WEB),
						    .ENA(ram_state_and_ctag_cset$ENA),
						    .ENB(ram_state_and_ctag_cset$ENB),
						    .DOA(),
						    .DOB(ram_state_and_ctag_cset$DOB));

  // submodule ram_word64_set
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd9),
	  .DATA_WIDTH(32'd64),
	  .MEMSIZE(10'd512)) ram_word64_set(.CLKA(CLK),
					    .CLKB(CLK),
					    .ADDRA(ram_word64_set$ADDRA),
					    .ADDRB(ram_word64_set$ADDRB),
					    .DIA(ram_word64_set$DIA),
					    .DIB(ram_word64_set$DIB),
					    .WEA(ram_word64_set$WEA),
					    .WEB(ram_word64_set$WEB),
					    .ENA(ram_word64_set$ENA),
					    .ENB(ram_word64_set$ENB),
					    .DOA(),
					    .DOB(ram_word64_set$DOB));

  // submodule soc_map
  mkSoC_Map soc_map(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_is_IO_addr_addr(soc_map$m_is_IO_addr_addr),
		    .m_is_mem_addr_addr(soc_map$m_is_mem_addr_addr),
		    .m_is_near_mem_IO_addr_addr(soc_map$m_is_near_mem_IO_addr_addr),
		    .m_uart0_addr_base(),
		    .m_uart0_addr_size(),
		    .m_uart0_addr_lim(),
		    .m_near_mem_io_addr_base(),
		    .m_near_mem_io_addr_size(),
		    .m_near_mem_io_addr_lim(),
		    .m_boot_rom_addr_base(),
		    .m_boot_rom_addr_size(),
		    .m_boot_rom_addr_lim(),
		    .m_mem0_controller_addr_base(),
		    .m_mem0_controller_addr_size(),
		    .m_mem0_controller_addr_lim(),
		    .m_tcm_addr_base(),
		    .m_tcm_addr_size(),
		    .m_tcm_addr_lim(),
		    .m_is_mem_addr(),
		    .m_is_IO_addr(soc_map$m_is_IO_addr),
		    .m_is_near_mem_IO_addr(soc_map$m_is_near_mem_IO_addr),
		    .m_pc_reset_value());

  // rule RL_rl_reset
  assign CAN_FIRE_RL_rl_reset = WILL_FIRE_RL_rl_reset ;
  assign WILL_FIRE_RL_rl_reset =
	     (rg_cset_in_cache != 7'd127 ||
	      f_reset_reqs$EMPTY_N && f_reset_rsps$FULL_N) &&
	     rg_state == 4'd1 ;

  // rule RL_rl_rereq
  assign CAN_FIRE_RL_rl_rereq = rg_state == 4'd10 ;
  assign WILL_FIRE_RL_rl_rereq =
	     CAN_FIRE_RL_rl_rereq && !WILL_FIRE_RL_rl_start_reset && !EN_req ;

  // rule RL_rl_ST_AMO_response
  assign CAN_FIRE_RL_rl_ST_AMO_response = rg_state == 4'd11 ;
  assign WILL_FIRE_RL_rl_ST_AMO_response = CAN_FIRE_RL_rl_ST_AMO_response ;

  // rule RL_rl_io_near_mem_read_req
  assign CAN_FIRE_RL_rl_io_near_mem_read_req =
	     f_near_mem_io_reqs$FULL_N && rg_state == 4'd12 && !rg_op &&
	     soc_map$m_is_near_mem_IO_addr ;
  assign WILL_FIRE_RL_rl_io_near_mem_read_req =
	     CAN_FIRE_RL_rl_io_near_mem_read_req &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_near_mem_read_rsp
  assign CAN_FIRE_RL_rl_io_near_mem_read_rsp =
	     f_near_mem_io_rsps$EMPTY_N && rg_state == 4'd13 &&
	     soc_map$m_is_near_mem_IO_addr &&
	     f_near_mem_io_rsps$D_OUT[65] ;
  assign WILL_FIRE_RL_rl_io_near_mem_read_rsp =
	     CAN_FIRE_RL_rl_io_near_mem_read_rsp &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_maintain_io_read_rsp
  assign CAN_FIRE_RL_rl_maintain_io_read_rsp = rg_state == 4'd14 ;
  assign WILL_FIRE_RL_rl_maintain_io_read_rsp =
	     CAN_FIRE_RL_rl_maintain_io_read_rsp ;

  // rule RL_rl_io_near_mem_write_req
  assign CAN_FIRE_RL_rl_io_near_mem_write_req =
	     f_near_mem_io_reqs$FULL_N && rg_state == 4'd12 && rg_op &&
	     soc_map$m_is_near_mem_IO_addr ;
  assign WILL_FIRE_RL_rl_io_near_mem_write_req =
	     CAN_FIRE_RL_rl_io_near_mem_write_req &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_near_mem_write_rsp
  assign CAN_FIRE_RL_rl_io_near_mem_write_rsp =
	     f_near_mem_io_rsps$EMPTY_N && !f_near_mem_io_rsps$D_OUT[65] ;
  assign WILL_FIRE_RL_rl_io_near_mem_write_rsp =
	     CAN_FIRE_RL_rl_io_near_mem_write_rsp ;

  // rule RL_rl_drive_exception_rsp
  assign CAN_FIRE_RL_rl_drive_exception_rsp = rg_state == 4'd4 ;
  assign WILL_FIRE_RL_rl_drive_exception_rsp = rg_state == 4'd4 ;

  // rule RL_rl_start_reset
  assign CAN_FIRE_RL_rl_start_reset =
	     f_reset_reqs$EMPTY_N && rg_state != 4'd1 ;
  assign WILL_FIRE_RL_rl_start_reset = CAN_FIRE_RL_rl_start_reset ;

  // rule RL_rl_cache_refill_req_loop
  assign CAN_FIRE_RL_rl_cache_refill_req_loop =
	     !master_xactor_crg_rd_addr_full$port2__read &&
	     rg_requesting_cline ;
  assign WILL_FIRE_RL_rl_cache_refill_req_loop =
	     CAN_FIRE_RL_rl_cache_refill_req_loop &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_probe_and_immed_rsp
  assign CAN_FIRE_RL_rl_probe_and_immed_rsp =
	     (soc_map$m_is_IO_addr || !rg_op ||
	      !master_xactor_crg_wr_addr_full$port2__read &&
	      !master_xactor_crg_wr_data_full$port2__read) &&
	     rg_state == 4'd3 ;
  assign WILL_FIRE_RL_rl_probe_and_immed_rsp =
	     CAN_FIRE_RL_rl_probe_and_immed_rsp &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_cache_refill_rsps_loop
  assign CAN_FIRE_RL_rl_cache_refill_rsps_loop =
	     master_xactor_crg_rd_data_full$port1__read && rg_state == 4'd9 ;
  assign WILL_FIRE_RL_rl_cache_refill_rsps_loop =
	     CAN_FIRE_RL_rl_cache_refill_rsps_loop &&
	     !WILL_FIRE_RL_rl_start_reset &&
	     !EN_req ;

  // rule RL_rl_io_read_req
  assign CAN_FIRE_RL_rl_io_read_req =
	     !master_xactor_crg_rd_addr_full$port2__read &&
	     rg_state == 4'd12 &&
	     !rg_op &&
	     !soc_map$m_is_near_mem_IO_addr ;
  assign WILL_FIRE_RL_rl_io_read_req =
	     CAN_FIRE_RL_rl_io_read_req &&
	     !WILL_FIRE_RL_rl_cache_refill_req_loop &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_read_rsp
  assign CAN_FIRE_RL_rl_io_read_rsp =
	     master_xactor_crg_rd_data_full$port1__read &&
	     rg_state == 4'd13 &&
	     !soc_map$m_is_near_mem_IO_addr ;
  assign WILL_FIRE_RL_rl_io_read_rsp =
	     CAN_FIRE_RL_rl_io_read_rsp && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_write_req
  assign CAN_FIRE_RL_rl_io_write_req =
	     !master_xactor_crg_wr_addr_full$port2__read &&
	     !master_xactor_crg_wr_data_full$port2__read &&
	     rg_state == 4'd12 &&
	     rg_op &&
	     !soc_map$m_is_near_mem_IO_addr ;
  assign WILL_FIRE_RL_rl_io_write_req = MUX_rg_state$write_1__SEL_3 ;

  // rule RL_rl_start_cache_refill
  assign CAN_FIRE_RL_rl_start_cache_refill =
	     !master_xactor_crg_rd_addr_full$port2__read &&
	     rg_state == 4'd8 &&
	     b__h15106 == 4'd0 ;
  assign WILL_FIRE_RL_rl_start_cache_refill = MUX_rg_state$write_1__SEL_1 ;

  // rule RL_rl_discard_write_rsp
  assign CAN_FIRE_RL_rl_discard_write_rsp =
	     b__h15106 != 4'd0 && master_xactor_crg_wr_resp_full$port1__read ;
  assign WILL_FIRE_RL_rl_discard_write_rsp =
	     CAN_FIRE_RL_rl_discard_write_rsp &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // inputs to muxes for submodule ports
  assign MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	     rg_op ;
  assign MUX_dw_output_ld_val$wset_1__SEL_2 =
	     WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	     f_near_mem_io_rsps$D_OUT[64] ;
  assign MUX_dw_output_ld_val$wset_1__SEL_3 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d180 ;
  assign MUX_dw_valid$wset_1__SEL_1 =
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ;
  assign MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 =
	     EN_req &&
	     req_f3_BITS_1_TO_0_47_EQ_0b0_48_OR_req_f3_BITS_ETC___d577 ;
  assign MUX_ram_word64_set$a_put_1__SEL_1 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ;
  assign MUX_ram_word64_set$b_put_1__SEL_2 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[1:0] != 2'd3 ;
  assign MUX_rg_error_during_refill$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_rg_rd_data[65:64] != 2'd0 ;
  assign MUX_rg_exc_code$write_1__SEL_1 =
	     EN_req &&
	     NOT_req_f3_BITS_1_TO_0_47_EQ_0b0_48_49_AND_NOT_ETC___d568 ;
  assign MUX_rg_exc_code$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_rg_rd_data[65:64] != 2'd0 ;
  assign MUX_rg_exc_code$write_1__SEL_4 =
	     WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	     !f_near_mem_io_rsps$D_OUT[64] ;
  assign MUX_rg_state$write_1__SEL_1 =
	     CAN_FIRE_RL_rl_start_cache_refill &&
	     !WILL_FIRE_RL_rl_cache_refill_req_loop &&
	     !WILL_FIRE_RL_rl_start_reset &&
	     !EN_req ;
  assign MUX_rg_state$write_1__SEL_3 =
	     CAN_FIRE_RL_rl_io_write_req && !WILL_FIRE_RL_rl_start_reset ;
  assign MUX_rg_state$write_1__SEL_6 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[1:0] == 2'd3 ;
  assign MUX_rg_state$write_1__SEL_7 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8_9_OR_ETC___d69 ;
  assign MUX_rg_state$write_1__SEL_13 =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 ;
  assign MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1 =
	     ctr_wr_rsps_pending_crg + 4'd1 ;
  always@(rg_f3 or
	  result__h18483 or
	  result__h18536 or
	  result__h18588 or
	  master_xactor_rg_rd_data or
	  result__h18510 or result__h18562 or result__h18614)
  begin
    case (rg_f3)
      3'b0: MUX_dw_output_ld_val$wset_1__VAL_1 = result__h18483;
      3'b001: MUX_dw_output_ld_val$wset_1__VAL_1 = result__h18536;
      3'b010: MUX_dw_output_ld_val$wset_1__VAL_1 = result__h18588;
      3'b011:
	  MUX_dw_output_ld_val$wset_1__VAL_1 = master_xactor_rg_rd_data[63:0];
      3'b100: MUX_dw_output_ld_val$wset_1__VAL_1 = result__h18510;
      3'b101: MUX_dw_output_ld_val$wset_1__VAL_1 = result__h18562;
      3'b110: MUX_dw_output_ld_val$wset_1__VAL_1 = result__h18614;
      3'd7: MUX_dw_output_ld_val$wset_1__VAL_1 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  result__h19355 or
	  result__h19408 or
	  result__h19460 or
	  f_near_mem_io_rsps$D_OUT or
	  result__h19382 or result__h19434 or result__h19486)
  begin
    case (rg_f3)
      3'b0: MUX_dw_output_ld_val$wset_1__VAL_2 = result__h19355;
      3'b001: MUX_dw_output_ld_val$wset_1__VAL_2 = result__h19408;
      3'b010: MUX_dw_output_ld_val$wset_1__VAL_2 = result__h19460;
      3'b011:
	  MUX_dw_output_ld_val$wset_1__VAL_2 = f_near_mem_io_rsps$D_OUT[63:0];
      3'b100: MUX_dw_output_ld_val$wset_1__VAL_2 = result__h19382;
      3'b101: MUX_dw_output_ld_val$wset_1__VAL_2 = result__h19434;
      3'b110: MUX_dw_output_ld_val$wset_1__VAL_2 = result__h19486;
      3'd7: MUX_dw_output_ld_val$wset_1__VAL_2 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_SEXT__ETC___d237 or
	  IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_SEXT__ETC___d266 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result2357_0x4_re_ETC__q25 or
	  rg_addr or
	  word64__h5090 or
	  IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_0_CON_ETC___d254 or
	  IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_0_CON_ETC___d275 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result2424_0x4_re_ETC__q26)
  begin
    case (rg_f3)
      3'b0:
	  MUX_dw_output_ld_val$wset_1__VAL_3 =
	      IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_SEXT__ETC___d237;
      3'b001:
	  MUX_dw_output_ld_val$wset_1__VAL_3 =
	      IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_SEXT__ETC___d266;
      3'b010:
	  MUX_dw_output_ld_val$wset_1__VAL_3 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result2357_0x4_re_ETC__q25;
      3'b011:
	  MUX_dw_output_ld_val$wset_1__VAL_3 =
	      (rg_addr[2:0] == 3'h0) ? word64__h5090 : 64'd0;
      3'b100:
	  MUX_dw_output_ld_val$wset_1__VAL_3 =
	      IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_0_CON_ETC___d254;
      3'b101:
	  MUX_dw_output_ld_val$wset_1__VAL_3 =
	      IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_0_CON_ETC___d275;
      3'b110:
	  MUX_dw_output_ld_val$wset_1__VAL_3 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result2424_0x4_re_ETC__q26;
      3'd7: MUX_dw_output_ld_val$wset_1__VAL_3 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  result__h19738 or
	  result__h19792 or
	  result__h19846 or
	  rg_ld_val or result__h19765 or result__h19819 or result__h19873)
  begin
    case (rg_f3)
      3'b0: MUX_dw_output_ld_val$wset_1__VAL_5 = result__h19738;
      3'b001: MUX_dw_output_ld_val$wset_1__VAL_5 = result__h19792;
      3'b010: MUX_dw_output_ld_val$wset_1__VAL_5 = result__h19846;
      3'b011: MUX_dw_output_ld_val$wset_1__VAL_5 = rg_ld_val;
      3'b100: MUX_dw_output_ld_val$wset_1__VAL_5 = result__h19765;
      3'b101: MUX_dw_output_ld_val$wset_1__VAL_5 = result__h19819;
      3'b110: MUX_dw_output_ld_val$wset_1__VAL_5 = result__h19873;
      3'd7: MUX_dw_output_ld_val$wset_1__VAL_5 = 64'd0;
    endcase
  end
  assign MUX_f_near_mem_io_reqs$enq_1__VAL_1 =
	     { 1'd1, value__h21171, 72'hAAAAAAAAAAAAAAAAAA } ;
  assign MUX_f_near_mem_io_reqs$enq_1__VAL_2 =
	     { 1'd0, value__h21171, value__h21173, req_wstrb__h20756 } ;
  assign MUX_master_xactor_rg_rd_addr$write_1__VAL_1 =
	     { value__h21171, 3'd0 } ;
  assign MUX_master_xactor_rg_rd_addr$write_1__VAL_2 =
	     { 32'd0, cline_addr__h15816, 3'd0 } ;
  assign MUX_master_xactor_rg_rd_addr$write_1__VAL_3 =
	     { cline_fabric_addr__h15817, 3'd0 } ;
  assign MUX_master_xactor_rg_wr_addr$write_1__VAL_1 =
	     { mem_req_wr_addr_awaddr__h14382, 3'd0 } ;
  assign MUX_master_xactor_rg_wr_addr$write_1__VAL_2 =
	     { io_req_wr_addr_awaddr__h20047, 3'd0 } ;
  assign MUX_master_xactor_rg_wr_data$write_1__VAL_1 =
	     { mem_req_wr_data_wdata__h14493,
	       mem_req_wr_data_wstrb__h14494 } ;
  assign MUX_master_xactor_rg_wr_data$write_1__VAL_2 =
	     { value__h21173, req_wstrb__h20756 } ;
  assign MUX_ram_state_and_ctag_cset$a_put_3__VAL_1 = { 3'd4, rg_pa[31:12] } ;
  assign MUX_ram_word64_set$b_put_2__VAL_2 = rg_word64_set_in_cache + 9'd1 ;
  assign MUX_ram_word64_set$b_put_2__VAL_4 = { rg_addr[11:5], 2'd0 } ;
  assign MUX_rg_cset_in_cache$write_1__VAL_1 = rg_cset_in_cache + 7'd1 ;
  assign MUX_rg_exc_code$write_1__VAL_1 = req_op ? 4'd6 : 4'd4 ;
  assign MUX_rg_req_byte_in_cline$write_1__VAL_1 =
	     rg_req_byte_in_cline + 64'd8 ;
  assign MUX_rg_state$write_1__VAL_2 =
	     NOT_req_f3_BITS_1_TO_0_47_EQ_0b0_48_49_AND_NOT_ETC___d568 ?
	       4'd4 :
	       4'd3 ;
  assign MUX_rg_state$write_1__VAL_4 =
	     (master_xactor_rg_rd_data[65:64] == 2'd0) ? 4'd14 : 4'd4 ;
  assign MUX_rg_state$write_1__VAL_6 =
	     (master_xactor_rg_rd_data[65:64] != 2'd0 ||
	      rg_error_during_refill) ?
	       4'd4 :
	       4'd10 ;
  assign MUX_rg_state$write_1__VAL_7 =
	     soc_map$m_is_IO_addr ? 4'd12 : (rg_op ? 4'd11 : 4'd8) ;
  assign MUX_rg_state$write_1__VAL_10 =
	     f_near_mem_io_rsps$D_OUT[64] ? 4'd14 : 4'd4 ;

  // inlined wires
  assign dw_valid$whas =
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ||
	     WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	     f_near_mem_io_rsps$D_OUT[64] ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d180 ||
	     WILL_FIRE_RL_rl_drive_exception_rsp ||
	     WILL_FIRE_RL_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_rl_ST_AMO_response ;
  assign master_xactor_crg_wr_addr_full$EN_port0__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign master_xactor_crg_wr_addr_full$port1__read =
	     !master_xactor_crg_wr_addr_full$EN_port0__write &&
	     master_xactor_crg_wr_addr_full ;
  assign master_xactor_crg_wr_addr_full$EN_port1__write =
	     master_xactor_crg_wr_addr_full$port1__read &&
	     mem_master_awready ;
  assign master_xactor_crg_wr_addr_full$port2__read =
	     !master_xactor_crg_wr_addr_full$EN_port1__write &&
	     master_xactor_crg_wr_addr_full$port1__read ;
  assign master_xactor_crg_wr_addr_full$EN_port2__write =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	     rg_op ||
	     WILL_FIRE_RL_rl_io_write_req ;
  assign master_xactor_crg_wr_addr_full$port3__read =
	     master_xactor_crg_wr_addr_full$EN_port2__write ?
	       1'd1 :
	       master_xactor_crg_wr_addr_full$port2__read ;
  assign master_xactor_crg_wr_data_full$EN_port0__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign master_xactor_crg_wr_data_full$port1__read =
	     !master_xactor_crg_wr_data_full$EN_port0__write &&
	     master_xactor_crg_wr_data_full ;
  assign master_xactor_crg_wr_data_full$EN_port1__write =
	     master_xactor_crg_wr_data_full$port1__read && mem_master_wready ;
  assign master_xactor_crg_wr_data_full$port2__read =
	     !master_xactor_crg_wr_data_full$EN_port1__write &&
	     master_xactor_crg_wr_data_full$port1__read ;
  assign master_xactor_crg_wr_data_full$EN_port2__write =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	     rg_op ||
	     WILL_FIRE_RL_rl_io_write_req ;
  assign master_xactor_crg_wr_data_full$port3__read =
	     master_xactor_crg_wr_data_full$EN_port2__write ?
	       1'd1 :
	       master_xactor_crg_wr_data_full$port2__read ;
  assign master_xactor_crg_wr_resp_full$EN_port0__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign master_xactor_crg_wr_resp_full$port1__read =
	     !master_xactor_crg_wr_resp_full$EN_port0__write &&
	     master_xactor_crg_wr_resp_full ;
  assign master_xactor_crg_wr_resp_full$port2__read =
	     !WILL_FIRE_RL_rl_discard_write_rsp &&
	     master_xactor_crg_wr_resp_full$port1__read ;
  assign master_xactor_crg_wr_resp_full$EN_port2__write =
	     mem_master_bvalid &&
	     !master_xactor_crg_wr_resp_full$port2__read ;
  assign master_xactor_crg_wr_resp_full$port3__read =
	     master_xactor_crg_wr_resp_full$EN_port2__write ||
	     master_xactor_crg_wr_resp_full$port2__read ;
  assign master_xactor_crg_rd_addr_full$EN_port0__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign master_xactor_crg_rd_addr_full$port1__read =
	     !master_xactor_crg_rd_addr_full$EN_port0__write &&
	     master_xactor_crg_rd_addr_full ;
  assign master_xactor_crg_rd_addr_full$EN_port1__write =
	     master_xactor_crg_rd_addr_full$port1__read &&
	     mem_master_arready ;
  assign master_xactor_crg_rd_addr_full$port2__read =
	     !master_xactor_crg_rd_addr_full$EN_port1__write &&
	     master_xactor_crg_rd_addr_full$port1__read ;
  assign master_xactor_crg_rd_addr_full$EN_port2__write =
	     WILL_FIRE_RL_rl_io_read_req ||
	     WILL_FIRE_RL_rl_cache_refill_req_loop ||
	     WILL_FIRE_RL_rl_start_cache_refill ;
  assign master_xactor_crg_rd_addr_full$port3__read =
	     master_xactor_crg_rd_addr_full$EN_port2__write ||
	     master_xactor_crg_rd_addr_full$port2__read ;
  assign master_xactor_crg_rd_data_full$EN_port0__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign master_xactor_crg_rd_data_full$port1__read =
	     !master_xactor_crg_rd_data_full$EN_port0__write &&
	     master_xactor_crg_rd_data_full ;
  assign master_xactor_crg_rd_data_full$EN_port1__write =
	     WILL_FIRE_RL_rl_io_read_rsp ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop ;
  assign master_xactor_crg_rd_data_full$port2__read =
	     !master_xactor_crg_rd_data_full$EN_port1__write &&
	     master_xactor_crg_rd_data_full$port1__read ;
  assign master_xactor_crg_rd_data_full$EN_port2__write =
	     mem_master_rvalid &&
	     !master_xactor_crg_rd_data_full$port2__read ;
  assign master_xactor_crg_rd_data_full$port3__read =
	     master_xactor_crg_rd_data_full$EN_port2__write ||
	     master_xactor_crg_rd_data_full$port2__read ;
  assign ctr_wr_rsps_pending_crg$EN_port0__write =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	     rg_op ||
	     WILL_FIRE_RL_rl_io_write_req ;
  assign ctr_wr_rsps_pending_crg$port0__write_1 =
	     MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 ?
	       MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1 :
	       MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1 ;
  assign ctr_wr_rsps_pending_crg$port1__write_1 = b__h15106 - 4'd1 ;
  assign ctr_wr_rsps_pending_crg$port2__read =
	     WILL_FIRE_RL_rl_discard_write_rsp ?
	       ctr_wr_rsps_pending_crg$port1__write_1 :
	       b__h15106 ;
  assign ctr_wr_rsps_pending_crg$EN_port2__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign ctr_wr_rsps_pending_crg$port3__read =
	     ctr_wr_rsps_pending_crg$EN_port2__write ?
	       4'd0 :
	       ctr_wr_rsps_pending_crg$port2__read ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN = set_verbosity_verbosity ;
  assign cfg_verbosity$EN = EN_set_verbosity ;

  // register ctr_wr_rsps_pending_crg
  assign ctr_wr_rsps_pending_crg$D_IN = ctr_wr_rsps_pending_crg$port3__read ;
  assign ctr_wr_rsps_pending_crg$EN = 1'b1 ;

  // register master_xactor_crg_rd_addr_full
  assign master_xactor_crg_rd_addr_full$D_IN =
	     master_xactor_crg_rd_addr_full$port3__read ;
  assign master_xactor_crg_rd_addr_full$EN = 1'b1 ;

  // register master_xactor_crg_rd_data_full
  assign master_xactor_crg_rd_data_full$D_IN =
	     master_xactor_crg_rd_data_full$port3__read ;
  assign master_xactor_crg_rd_data_full$EN = 1'b1 ;

  // register master_xactor_crg_wr_addr_full
  assign master_xactor_crg_wr_addr_full$D_IN =
	     master_xactor_crg_wr_addr_full$port3__read ;
  assign master_xactor_crg_wr_addr_full$EN = 1'b1 ;

  // register master_xactor_crg_wr_data_full
  assign master_xactor_crg_wr_data_full$D_IN =
	     master_xactor_crg_wr_data_full$port3__read ;
  assign master_xactor_crg_wr_data_full$EN = 1'b1 ;

  // register master_xactor_crg_wr_resp_full
  assign master_xactor_crg_wr_resp_full$D_IN =
	     master_xactor_crg_wr_resp_full$port3__read ;
  assign master_xactor_crg_wr_resp_full$EN = 1'b1 ;

  // register master_xactor_rg_rd_addr
  always@(WILL_FIRE_RL_rl_io_read_req or
	  MUX_master_xactor_rg_rd_addr$write_1__VAL_1 or
	  WILL_FIRE_RL_rl_start_cache_refill or
	  MUX_master_xactor_rg_rd_addr$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_cache_refill_req_loop or
	  MUX_master_xactor_rg_rd_addr$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_io_read_req:
	  master_xactor_rg_rd_addr$D_IN =
	      MUX_master_xactor_rg_rd_addr$write_1__VAL_1;
      WILL_FIRE_RL_rl_start_cache_refill:
	  master_xactor_rg_rd_addr$D_IN =
	      MUX_master_xactor_rg_rd_addr$write_1__VAL_2;
      WILL_FIRE_RL_rl_cache_refill_req_loop:
	  master_xactor_rg_rd_addr$D_IN =
	      MUX_master_xactor_rg_rd_addr$write_1__VAL_3;
      default: master_xactor_rg_rd_addr$D_IN =
		   67'h2AAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign master_xactor_rg_rd_addr$EN =
	     WILL_FIRE_RL_rl_io_read_req ||
	     WILL_FIRE_RL_rl_start_cache_refill ||
	     WILL_FIRE_RL_rl_cache_refill_req_loop ;

  // register master_xactor_rg_rd_data
  assign master_xactor_rg_rd_data$D_IN =
	     { mem_master_rresp, mem_master_rdata } ;
  assign master_xactor_rg_rd_data$EN = 1'd1 ;

  // register master_xactor_rg_wr_addr
  assign master_xactor_rg_wr_addr$D_IN =
	     MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 ?
	       MUX_master_xactor_rg_wr_addr$write_1__VAL_1 :
	       MUX_master_xactor_rg_wr_addr$write_1__VAL_2 ;
  assign master_xactor_rg_wr_addr$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	     rg_op ||
	     WILL_FIRE_RL_rl_io_write_req ;

  // register master_xactor_rg_wr_data
  assign master_xactor_rg_wr_data$D_IN =
	     MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 ?
	       MUX_master_xactor_rg_wr_data$write_1__VAL_1 :
	       MUX_master_xactor_rg_wr_data$write_1__VAL_2 ;
  assign master_xactor_rg_wr_data$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	     rg_op ||
	     WILL_FIRE_RL_rl_io_write_req ;

  // register master_xactor_rg_wr_resp
  assign master_xactor_rg_wr_resp$D_IN = mem_master_bresp ;
  assign master_xactor_rg_wr_resp$EN =
	     mem_master_bvalid &&
	     !master_xactor_crg_wr_resp_full$port2__read ;

  // register rg_addr
  assign rg_addr$D_IN = req_addr ;
  assign rg_addr$EN = EN_req ;

  // register rg_cset_in_cache
  assign rg_cset_in_cache$D_IN =
	     WILL_FIRE_RL_rl_reset ?
	       MUX_rg_cset_in_cache$write_1__VAL_1 :
	       7'd0 ;
  assign rg_cset_in_cache$EN =
	     WILL_FIRE_RL_rl_reset || WILL_FIRE_RL_rl_start_reset ;

  // register rg_error_during_refill
  assign rg_error_during_refill$D_IN =
	     MUX_rg_error_during_refill$write_1__SEL_1 ;
  assign rg_error_during_refill$EN =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_rg_rd_data[65:64] != 2'd0 ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // register rg_exc_code
  always@(MUX_rg_exc_code$write_1__SEL_1 or
	  MUX_rg_exc_code$write_1__VAL_1 or
	  MUX_rg_exc_code$write_1__SEL_2 or
	  MUX_rg_error_during_refill$write_1__SEL_1 or
	  access_exc_code__h3039 or MUX_rg_exc_code$write_1__SEL_4)
  case (1'b1)
    MUX_rg_exc_code$write_1__SEL_1:
	rg_exc_code$D_IN = MUX_rg_exc_code$write_1__VAL_1;
    MUX_rg_exc_code$write_1__SEL_2: rg_exc_code$D_IN = 4'd5;
    MUX_rg_error_during_refill$write_1__SEL_1:
	rg_exc_code$D_IN = access_exc_code__h3039;
    MUX_rg_exc_code$write_1__SEL_4: rg_exc_code$D_IN = 4'd5;
    default: rg_exc_code$D_IN = 4'b1010 /* unspecified value */ ;
  endcase
  assign rg_exc_code$EN =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_rg_rd_data[65:64] != 2'd0 ||
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_rg_rd_data[65:64] != 2'd0 ||
	     WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	     !f_near_mem_io_rsps$D_OUT[64] ||
	     EN_req &&
	     NOT_req_f3_BITS_1_TO_0_47_EQ_0b0_48_49_AND_NOT_ETC___d568 ;

  // register rg_f3
  assign rg_f3$D_IN = req_f3 ;
  assign rg_f3$EN = EN_req ;

  // register rg_ld_val
  assign rg_ld_val$D_IN =
	     WILL_FIRE_RL_rl_io_read_rsp ?
	       master_xactor_rg_rd_data[63:0] :
	       f_near_mem_io_rsps$D_OUT[63:0] ;
  assign rg_ld_val$EN =
	     WILL_FIRE_RL_rl_io_read_rsp ||
	     WILL_FIRE_RL_rl_io_near_mem_read_rsp ;

  // register rg_lower_word32
  assign rg_lower_word32$D_IN = 32'h0 ;
  assign rg_lower_word32$EN = 1'b0 ;

  // register rg_lower_word32_full
  assign rg_lower_word32_full$D_IN = 1'd0 ;
  assign rg_lower_word32_full$EN =
	     WILL_FIRE_RL_rl_start_cache_refill ||
	     WILL_FIRE_RL_rl_start_reset ;

  // register rg_op
  assign rg_op$D_IN = req_op ;
  assign rg_op$EN = EN_req ;

  // register rg_pa
  assign rg_pa$D_IN = EN_req ? req_addr : rg_addr ;
  assign rg_pa$EN = EN_req || WILL_FIRE_RL_rl_probe_and_immed_rsp ;

  // register rg_pte_pa
  assign rg_pte_pa$D_IN = 32'h0 ;
  assign rg_pte_pa$EN = 1'b0 ;

  // register rg_req_byte_in_cline
  assign rg_req_byte_in_cline$D_IN =
	     WILL_FIRE_RL_rl_cache_refill_req_loop ?
	       MUX_rg_req_byte_in_cline$write_1__VAL_1 :
	       64'd8 ;
  assign rg_req_byte_in_cline$EN =
	     WILL_FIRE_RL_rl_cache_refill_req_loop ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // register rg_requesting_cline
  always@(WILL_FIRE_RL_rl_cache_refill_req_loop or
	  rg_req_byte_in_cline or
	  WILL_FIRE_RL_rl_start_reset or WILL_FIRE_RL_rl_start_cache_refill)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_cache_refill_req_loop:
	  rg_requesting_cline$D_IN = rg_req_byte_in_cline != 64'd24;
      WILL_FIRE_RL_rl_start_reset: rg_requesting_cline$D_IN = 1'd0;
      WILL_FIRE_RL_rl_start_cache_refill: rg_requesting_cline$D_IN = 1'd1;
      default: rg_requesting_cline$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign rg_requesting_cline$EN =
	     WILL_FIRE_RL_rl_cache_refill_req_loop ||
	     WILL_FIRE_RL_rl_start_reset ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // register rg_st_amo_val
  assign rg_st_amo_val$D_IN = req_st_value ;
  assign rg_st_amo_val$EN = EN_req ;

  // register rg_state
  always@(WILL_FIRE_RL_rl_start_cache_refill or
	  EN_req or
	  MUX_rg_state$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_io_write_req or
	  WILL_FIRE_RL_rl_io_read_rsp or
	  MUX_rg_state$write_1__VAL_4 or
	  WILL_FIRE_RL_rl_io_read_req or
	  MUX_rg_state$write_1__SEL_6 or
	  MUX_rg_state$write_1__VAL_6 or
	  MUX_rg_state$write_1__SEL_7 or
	  MUX_rg_state$write_1__VAL_7 or
	  WILL_FIRE_RL_rl_start_reset or
	  WILL_FIRE_RL_rl_io_near_mem_write_req or
	  WILL_FIRE_RL_rl_io_near_mem_read_rsp or
	  MUX_rg_state$write_1__VAL_10 or
	  WILL_FIRE_RL_rl_io_near_mem_read_req or
	  WILL_FIRE_RL_rl_rereq or MUX_rg_state$write_1__SEL_13)
  case (1'b1)
    WILL_FIRE_RL_rl_start_cache_refill: rg_state$D_IN = 4'd9;
    EN_req: rg_state$D_IN = MUX_rg_state$write_1__VAL_2;
    WILL_FIRE_RL_rl_io_write_req: rg_state$D_IN = 4'd11;
    WILL_FIRE_RL_rl_io_read_rsp: rg_state$D_IN = MUX_rg_state$write_1__VAL_4;
    WILL_FIRE_RL_rl_io_read_req: rg_state$D_IN = 4'd13;
    MUX_rg_state$write_1__SEL_6: rg_state$D_IN = MUX_rg_state$write_1__VAL_6;
    MUX_rg_state$write_1__SEL_7: rg_state$D_IN = MUX_rg_state$write_1__VAL_7;
    WILL_FIRE_RL_rl_start_reset: rg_state$D_IN = 4'd1;
    WILL_FIRE_RL_rl_io_near_mem_write_req: rg_state$D_IN = 4'd11;
    WILL_FIRE_RL_rl_io_near_mem_read_rsp:
	rg_state$D_IN = MUX_rg_state$write_1__VAL_10;
    WILL_FIRE_RL_rl_io_near_mem_read_req: rg_state$D_IN = 4'd13;
    WILL_FIRE_RL_rl_rereq: rg_state$D_IN = 4'd3;
    MUX_rg_state$write_1__SEL_13: rg_state$D_IN = 4'd2;
    default: rg_state$D_IN = 4'b1010 /* unspecified value */ ;
  endcase
  assign rg_state$EN =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[1:0] == 2'd3 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8_9_OR_ETC___d69 ||
	     WILL_FIRE_RL_rl_io_read_rsp ||
	     WILL_FIRE_RL_rl_io_near_mem_read_rsp ||
	     EN_req ||
	     WILL_FIRE_RL_rl_start_reset ||
	     WILL_FIRE_RL_rl_rereq ||
	     WILL_FIRE_RL_rl_start_cache_refill ||
	     WILL_FIRE_RL_rl_io_near_mem_write_req ||
	     WILL_FIRE_RL_rl_io_write_req ||
	     WILL_FIRE_RL_rl_io_near_mem_read_req ||
	     WILL_FIRE_RL_rl_io_read_req ;

  // register rg_word64_set_in_cache
  assign rg_word64_set_in_cache$D_IN =
	     MUX_ram_word64_set$b_put_1__SEL_2 ?
	       MUX_ram_word64_set$b_put_2__VAL_2 :
	       MUX_ram_word64_set$b_put_2__VAL_4 ;
  assign rg_word64_set_in_cache$EN =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[1:0] != 2'd3 ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // submodule f_near_mem_io_reqs
  assign f_near_mem_io_reqs$D_IN =
	     WILL_FIRE_RL_rl_io_near_mem_read_req ?
	       MUX_f_near_mem_io_reqs$enq_1__VAL_1 :
	       MUX_f_near_mem_io_reqs$enq_1__VAL_2 ;
  assign f_near_mem_io_reqs$ENQ =
	     WILL_FIRE_RL_rl_io_near_mem_read_req ||
	     WILL_FIRE_RL_rl_io_near_mem_write_req ;
  assign f_near_mem_io_reqs$DEQ = EN_near_mem_io_client_request_get ;
  assign f_near_mem_io_reqs$CLR = 1'b0 ;

  // submodule f_near_mem_io_rsps
  assign f_near_mem_io_rsps$D_IN = near_mem_io_client_response_put ;
  assign f_near_mem_io_rsps$ENQ = EN_near_mem_io_client_response_put ;
  assign f_near_mem_io_rsps$DEQ =
	     WILL_FIRE_RL_rl_io_near_mem_write_rsp ||
	     WILL_FIRE_RL_rl_io_near_mem_read_rsp ;
  assign f_near_mem_io_rsps$CLR = 1'b0 ;

  // submodule f_reset_reqs
  assign f_reset_reqs$D_IN = !EN_server_reset_request_put ;
  assign f_reset_reqs$ENQ =
	     EN_server_reset_request_put || EN_server_flush_request_put ;
  assign f_reset_reqs$DEQ =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$D_IN = f_reset_reqs$D_OUT ;
  assign f_reset_rsps$ENQ =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 ;
  assign f_reset_rsps$DEQ =
	     EN_server_flush_response_get || EN_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule ram_state_and_ctag_cset
  assign ram_state_and_ctag_cset$ADDRA =
	     WILL_FIRE_RL_rl_start_cache_refill ?
	       rg_addr[11:5] :
	       rg_cset_in_cache ;
  assign ram_state_and_ctag_cset$ADDRB =
	     MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       req_addr[11:5] :
	       rg_addr[11:5] ;
  assign ram_state_and_ctag_cset$DIA =
	     WILL_FIRE_RL_rl_start_cache_refill ?
	       MUX_ram_state_and_ctag_cset$a_put_3__VAL_1 :
	       23'd2796202 ;
  assign ram_state_and_ctag_cset$DIB =
	     MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       23'b01010101010101010101010 /* unspecified value */  :
	       23'b01010101010101010101010 /* unspecified value */  ;
  assign ram_state_and_ctag_cset$WEA = 1'd1 ;
  assign ram_state_and_ctag_cset$WEB = 1'd0 ;
  assign ram_state_and_ctag_cset$ENA =
	     WILL_FIRE_RL_rl_start_cache_refill || WILL_FIRE_RL_rl_reset ;
  assign ram_state_and_ctag_cset$ENB =
	     EN_req &&
	     req_f3_BITS_1_TO_0_47_EQ_0b0_48_OR_req_f3_BITS_ETC___d577 ||
	     WILL_FIRE_RL_rl_rereq ;

  // submodule ram_word64_set
  assign ram_word64_set$ADDRA =
	     MUX_ram_word64_set$a_put_1__SEL_1 ?
	       rg_word64_set_in_cache :
	       rg_addr[11:3] ;
  always@(MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  req_addr or
	  MUX_ram_word64_set$b_put_1__SEL_2 or
	  MUX_ram_word64_set$b_put_2__VAL_2 or
	  WILL_FIRE_RL_rl_rereq or
	  rg_addr or
	  WILL_FIRE_RL_rl_start_cache_refill or
	  MUX_ram_word64_set$b_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  ram_word64_set$ADDRB = req_addr[11:3];
      MUX_ram_word64_set$b_put_1__SEL_2:
	  ram_word64_set$ADDRB = MUX_ram_word64_set$b_put_2__VAL_2;
      WILL_FIRE_RL_rl_rereq: ram_word64_set$ADDRB = rg_addr[11:3];
      WILL_FIRE_RL_rl_start_cache_refill:
	  ram_word64_set$ADDRB = MUX_ram_word64_set$b_put_2__VAL_4;
      default: ram_word64_set$ADDRB = 9'b010101010 /* unspecified value */ ;
    endcase
  end
  assign ram_word64_set$DIA =
	     MUX_ram_word64_set$a_put_1__SEL_1 ?
	       master_xactor_rg_rd_data[63:0] :
	       IF_rg_f3_8_EQ_0b0_9_THEN_IF_rg_addr_7_BITS_2_T_ETC___d140 ;
  always@(MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  MUX_ram_word64_set$b_put_1__SEL_2 or
	  WILL_FIRE_RL_rl_rereq or WILL_FIRE_RL_rl_start_cache_refill)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      MUX_ram_word64_set$b_put_1__SEL_2:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_rl_rereq:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_rl_start_cache_refill:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      default: ram_word64_set$DIB =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ram_word64_set$WEA = 1'd1 ;
  assign ram_word64_set$WEB = 1'd0 ;
  assign ram_word64_set$ENA =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d76 ;
  assign ram_word64_set$ENB =
	     EN_req &&
	     req_f3_BITS_1_TO_0_47_EQ_0b0_48_OR_req_f3_BITS_ETC___d577 ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[1:0] != 2'd3 ||
	     WILL_FIRE_RL_rl_rereq ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // submodule soc_map
  assign soc_map$m_is_IO_addr_addr = { 32'd0, rg_addr } ;
  assign soc_map$m_is_mem_addr_addr = 64'h0 ;
  assign soc_map$m_is_near_mem_IO_addr_addr = { 32'd0, rg_pa } ;

  // remaining internal signals
  assign NOT_cfg_verbosity_read__0_ULE_1_1___d12 = cfg_verbosity > 4'd1 ;
  assign NOT_cfg_verbosity_read__0_ULE_2_26___d327 = cfg_verbosity > 4'd2 ;
  assign NOT_req_f3_BITS_1_TO_0_47_EQ_0b0_48_49_AND_NOT_ETC___d568 =
	     req_f3[1:0] != 2'b0 && (req_f3[1:0] != 2'b01 || req_addr[0]) &&
	     (req_f3[1:0] != 2'b10 || req_addr[1:0] != 2'b0) &&
	     (req_f3[1:0] != 2'b11 || req_addr[2:0] != 3'b0) ;
  assign NOT_rg_op_0_1_AND_ram_state_and_ctag_cset_b_re_ETC___d295 =
	     !rg_op && ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__8_BITS_21_TO_0_ETC___d65 &&
	     NOT_cfg_verbosity_read__0_ULE_1_1___d12 ;
  assign NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d180 =
	     !soc_map$m_is_IO_addr && !rg_op &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__8_BITS_21_TO_0_ETC___d65 ;
  assign NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d76 =
	     !soc_map$m_is_IO_addr && rg_op &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__8_BITS_21_TO_0_ETC___d65 ;
  assign _theResult___fst__h14611 = rg_st_amo_val << shift_bits__h14391 ;
  assign _theResult___fst__h20896 = rg_st_amo_val << shift_bits__h20768 ;
  assign access_exc_code__h3039 =
	     dmem_not_imem ? (rg_op ? 4'd7 : 4'd5) : 4'd1 ;
  assign b__h15106 =
	     ctr_wr_rsps_pending_crg$EN_port0__write ?
	       ctr_wr_rsps_pending_crg$port0__write_1 :
	       ctr_wr_rsps_pending_crg ;
  assign cline_addr__h15816 = { rg_pa[31:5], 5'd0 } ;
  assign cline_fabric_addr__h15817 =
	     { 32'd0, cline_addr__h15816 } | rg_req_byte_in_cline ;
  assign f_near_mem_io_rspsD_OUT_BITS_15_TO_0__q5 =
	     f_near_mem_io_rsps$D_OUT[15:0] ;
  assign f_near_mem_io_rspsD_OUT_BITS_31_TO_0__q8 =
	     f_near_mem_io_rsps$D_OUT[31:0] ;
  assign f_near_mem_io_rspsD_OUT_BITS_7_TO_0__q2 =
	     f_near_mem_io_rsps$D_OUT[7:0] ;
  assign io_req_wr_addr_awaddr__h20047 = { 32'd0, x__h20072 } ;
  assign master_xactor_rg_rd_data_BITS_15_TO_0__q4 =
	     master_xactor_rg_rd_data[15:0] ;
  assign master_xactor_rg_rd_data_BITS_31_TO_0__q7 =
	     master_xactor_rg_rd_data[31:0] ;
  assign master_xactor_rg_rd_data_BITS_7_TO_0__q1 =
	     master_xactor_rg_rd_data[7:0] ;
  assign mem_req_wr_addr_awaddr__h14382 = { 32'd0, x__h14408 } ;
  assign pa_ctag__h4948 = { 2'd0, rg_addr[31:12] } ;
  assign ram_state_and_ctag_cset_b_read__8_BITS_21_TO_0_ETC___d65 =
	     ram_state_and_ctag_cset$DOB[21:0] == pa_ctag__h4948 ;
  assign req_f3_BITS_1_TO_0_47_EQ_0b0_48_OR_req_f3_BITS_ETC___d577 =
	     req_f3[1:0] == 2'b0 || req_f3[1:0] == 2'b01 && !req_addr[0] ||
	     req_f3[1:0] == 2'b10 && req_addr[1:0] == 2'b0 ||
	     req_f3[1:0] == 2'b11 && req_addr[2:0] == 3'b0 ;
  assign result__h11653 =
	     { {56{word64090_BITS_15_TO_8__q13[7]}},
	       word64090_BITS_15_TO_8__q13 } ;
  assign result__h11681 =
	     { {56{word64090_BITS_23_TO_16__q14[7]}},
	       word64090_BITS_23_TO_16__q14 } ;
  assign result__h11709 =
	     { {56{word64090_BITS_31_TO_24__q16[7]}},
	       word64090_BITS_31_TO_24__q16 } ;
  assign result__h11737 =
	     { {56{word64090_BITS_39_TO_32__q17[7]}},
	       word64090_BITS_39_TO_32__q17 } ;
  assign result__h11765 =
	     { {56{word64090_BITS_47_TO_40__q20[7]}},
	       word64090_BITS_47_TO_40__q20 } ;
  assign result__h11793 =
	     { {56{word64090_BITS_55_TO_48__q21[7]}},
	       word64090_BITS_55_TO_48__q21 } ;
  assign result__h11821 =
	     { {56{word64090_BITS_63_TO_56__q23[7]}},
	       word64090_BITS_63_TO_56__q23 } ;
  assign result__h11866 = { 56'd0, word64__h5090[7:0] } ;
  assign result__h11894 = { 56'd0, word64__h5090[15:8] } ;
  assign result__h11922 = { 56'd0, word64__h5090[23:16] } ;
  assign result__h11950 = { 56'd0, word64__h5090[31:24] } ;
  assign result__h11978 = { 56'd0, word64__h5090[39:32] } ;
  assign result__h12006 = { 56'd0, word64__h5090[47:40] } ;
  assign result__h12034 = { 56'd0, word64__h5090[55:48] } ;
  assign result__h12062 = { 56'd0, word64__h5090[63:56] } ;
  assign result__h12107 =
	     { {48{word64090_BITS_15_TO_0__q11[15]}},
	       word64090_BITS_15_TO_0__q11 } ;
  assign result__h12135 =
	     { {48{word64090_BITS_31_TO_16__q15[15]}},
	       word64090_BITS_31_TO_16__q15 } ;
  assign result__h12163 =
	     { {48{word64090_BITS_47_TO_32__q18[15]}},
	       word64090_BITS_47_TO_32__q18 } ;
  assign result__h12191 =
	     { {48{word64090_BITS_63_TO_48__q22[15]}},
	       word64090_BITS_63_TO_48__q22 } ;
  assign result__h12232 = { 48'd0, word64__h5090[15:0] } ;
  assign result__h12260 = { 48'd0, word64__h5090[31:16] } ;
  assign result__h12288 = { 48'd0, word64__h5090[47:32] } ;
  assign result__h12316 = { 48'd0, word64__h5090[63:48] } ;
  assign result__h12357 =
	     { {32{word64090_BITS_31_TO_0__q12[31]}},
	       word64090_BITS_31_TO_0__q12 } ;
  assign result__h12385 =
	     { {32{word64090_BITS_63_TO_32__q19[31]}},
	       word64090_BITS_63_TO_32__q19 } ;
  assign result__h12424 = { 32'd0, word64__h5090[31:0] } ;
  assign result__h12452 = { 32'd0, word64__h5090[63:32] } ;
  assign result__h18483 =
	     { {56{master_xactor_rg_rd_data_BITS_7_TO_0__q1[7]}},
	       master_xactor_rg_rd_data_BITS_7_TO_0__q1 } ;
  assign result__h18510 = { 56'd0, master_xactor_rg_rd_data[7:0] } ;
  assign result__h18536 =
	     { {48{master_xactor_rg_rd_data_BITS_15_TO_0__q4[15]}},
	       master_xactor_rg_rd_data_BITS_15_TO_0__q4 } ;
  assign result__h18562 = { 48'd0, master_xactor_rg_rd_data[15:0] } ;
  assign result__h18588 =
	     { {32{master_xactor_rg_rd_data_BITS_31_TO_0__q7[31]}},
	       master_xactor_rg_rd_data_BITS_31_TO_0__q7 } ;
  assign result__h18614 = { 32'd0, master_xactor_rg_rd_data[31:0] } ;
  assign result__h19355 =
	     { {56{f_near_mem_io_rspsD_OUT_BITS_7_TO_0__q2[7]}},
	       f_near_mem_io_rspsD_OUT_BITS_7_TO_0__q2 } ;
  assign result__h19382 = { 56'd0, f_near_mem_io_rsps$D_OUT[7:0] } ;
  assign result__h19408 =
	     { {48{f_near_mem_io_rspsD_OUT_BITS_15_TO_0__q5[15]}},
	       f_near_mem_io_rspsD_OUT_BITS_15_TO_0__q5 } ;
  assign result__h19434 = { 48'd0, f_near_mem_io_rsps$D_OUT[15:0] } ;
  assign result__h19460 =
	     { {32{f_near_mem_io_rspsD_OUT_BITS_31_TO_0__q8[31]}},
	       f_near_mem_io_rspsD_OUT_BITS_31_TO_0__q8 } ;
  assign result__h19486 = { 32'd0, f_near_mem_io_rsps$D_OUT[31:0] } ;
  assign result__h19738 =
	     { {56{rg_ld_val_BITS_7_TO_0__q3[7]}},
	       rg_ld_val_BITS_7_TO_0__q3 } ;
  assign result__h19765 = { 56'd0, rg_ld_val[7:0] } ;
  assign result__h19792 =
	     { {48{rg_ld_val_BITS_15_TO_0__q6[15]}},
	       rg_ld_val_BITS_15_TO_0__q6 } ;
  assign result__h19819 = { 48'd0, rg_ld_val[15:0] } ;
  assign result__h19846 =
	     { {32{rg_ld_val_BITS_31_TO_0__q9[31]}},
	       rg_ld_val_BITS_31_TO_0__q9 } ;
  assign result__h19873 = { 32'd0, rg_ld_val[31:0] } ;
  assign result__h5297 =
	     { {56{word64090_BITS_7_TO_0__q10[7]}},
	       word64090_BITS_7_TO_0__q10 } ;
  assign rg_ld_val_BITS_15_TO_0__q6 = rg_ld_val[15:0] ;
  assign rg_ld_val_BITS_31_TO_0__q9 = rg_ld_val[31:0] ;
  assign rg_ld_val_BITS_7_TO_0__q3 = rg_ld_val[7:0] ;
  assign rg_op_0_AND_ram_state_and_ctag_cset_b_read__8__ETC___d142 =
	     rg_op && ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__8_BITS_21_TO_0_ETC___d65 &&
	     NOT_cfg_verbosity_read__0_ULE_1_1___d12 ;
  assign shift_bits__h14391 = { rg_addr[2:0], 3'b0 } ;
  assign shift_bits__h20768 = { rg_pa[2:0], 3'b0 } ;
  assign soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8_9_OR_ETC___d69 =
	     soc_map$m_is_IO_addr || rg_op ||
	     !ram_state_and_ctag_cset$DOB[22] ||
	     !ram_state_and_ctag_cset_b_read__8_BITS_21_TO_0_ETC___d65 ;
  assign strobe64__h14610 = 8'b00000001 << rg_addr[2:0] ;
  assign strobe64__h14653 = 8'b00000011 << rg_addr[2:0] ;
  assign strobe64__h14676 = 8'b00001111 << rg_addr[2:0] ;
  assign strobe64__h20895 = 8'b00000001 << rg_pa[2:0] ;
  assign strobe64__h20938 = 8'b00000011 << rg_pa[2:0] ;
  assign strobe64__h20961 = 8'b00001111 << rg_pa[2:0] ;
  assign value__h21171 = { 32'd0, rg_pa } ;
  assign word64090_BITS_15_TO_0__q11 = word64__h5090[15:0] ;
  assign word64090_BITS_15_TO_8__q13 = word64__h5090[15:8] ;
  assign word64090_BITS_23_TO_16__q14 = word64__h5090[23:16] ;
  assign word64090_BITS_31_TO_0__q12 = word64__h5090[31:0] ;
  assign word64090_BITS_31_TO_16__q15 = word64__h5090[31:16] ;
  assign word64090_BITS_31_TO_24__q16 = word64__h5090[31:24] ;
  assign word64090_BITS_39_TO_32__q17 = word64__h5090[39:32] ;
  assign word64090_BITS_47_TO_32__q18 = word64__h5090[47:32] ;
  assign word64090_BITS_47_TO_40__q20 = word64__h5090[47:40] ;
  assign word64090_BITS_55_TO_48__q21 = word64__h5090[55:48] ;
  assign word64090_BITS_63_TO_32__q19 = word64__h5090[63:32] ;
  assign word64090_BITS_63_TO_48__q22 = word64__h5090[63:48] ;
  assign word64090_BITS_63_TO_56__q23 = word64__h5090[63:56] ;
  assign word64090_BITS_7_TO_0__q10 = word64__h5090[7:0] ;
  assign word64__h5090 = ram_word64_set$DOB & y__h5333 ;
  assign x__h14408 = { rg_addr[31:3], 3'd0 } ;
  assign x__h20072 = { rg_pa[31:3], 3'd0 } ;
  assign y__h5333 =
	     {64{ram_state_and_ctag_cset$DOB[22] &&
		 ram_state_and_ctag_cset_b_read__8_BITS_21_TO_0_ETC___d65}} ;
  always@(rg_f3 or strobe64__h14610 or strobe64__h14653 or strobe64__h14676)
  begin
    case (rg_f3[1:0])
      2'b0: mem_req_wr_data_wstrb__h14494 = strobe64__h14610;
      2'b01: mem_req_wr_data_wstrb__h14494 = strobe64__h14653;
      2'b10: mem_req_wr_data_wstrb__h14494 = strobe64__h14676;
      2'b11: mem_req_wr_data_wstrb__h14494 = 8'b11111111;
    endcase
  end
  always@(rg_f3 or rg_st_amo_val or _theResult___fst__h14611)
  begin
    case (rg_f3[1:0])
      2'b0, 2'b01, 2'b10:
	  mem_req_wr_data_wdata__h14493 = _theResult___fst__h14611;
      2'd3: mem_req_wr_data_wdata__h14493 = rg_st_amo_val;
    endcase
  end
  always@(rg_f3 or strobe64__h20895 or strobe64__h20938 or strobe64__h20961)
  begin
    case (rg_f3[1:0])
      2'b0: req_wstrb__h20756 = strobe64__h20895;
      2'b01: req_wstrb__h20756 = strobe64__h20938;
      2'b10: req_wstrb__h20756 = strobe64__h20961;
      2'b11: req_wstrb__h20756 = 8'b11111111;
    endcase
  end
  always@(rg_f3 or rg_st_amo_val or _theResult___fst__h20896)
  begin
    case (rg_f3[1:0])
      2'b0, 2'b01, 2'b10: value__h21173 = _theResult___fst__h20896;
      2'd3: value__h21173 = rg_st_amo_val;
    endcase
  end
  always@(rg_addr or
	  result__h12107 or
	  result__h12135 or result__h12163 or result__h12191)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_SEXT__ETC___d266 =
	      result__h12107;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_SEXT__ETC___d266 =
	      result__h12135;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_SEXT__ETC___d266 =
	      result__h12163;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_SEXT__ETC___d266 =
	      result__h12191;
      default: IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_SEXT__ETC___d266 =
		   64'd0;
    endcase
  end
  always@(rg_addr or ram_word64_set$DOB or rg_st_amo_val)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_ram_w_ETC___d129 =
	      { ram_word64_set$DOB[63:16], rg_st_amo_val[15:0] };
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_ram_w_ETC___d129 =
	      { ram_word64_set$DOB[63:32],
		rg_st_amo_val[15:0],
		ram_word64_set$DOB[15:0] };
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_ram_w_ETC___d129 =
	      { ram_word64_set$DOB[63:48],
		rg_st_amo_val[15:0],
		ram_word64_set$DOB[31:0] };
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_ram_w_ETC___d129 =
	      { rg_st_amo_val[15:0], ram_word64_set$DOB[47:0] };
      default: IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_ram_w_ETC___d129 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_addr or
	  result__h5297 or
	  result__h11653 or
	  result__h11681 or
	  result__h11709 or
	  result__h11737 or
	  result__h11765 or result__h11793 or result__h11821)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_SEXT__ETC___d237 =
	      result__h5297;
      3'h1:
	  IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_SEXT__ETC___d237 =
	      result__h11653;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_SEXT__ETC___d237 =
	      result__h11681;
      3'h3:
	  IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_SEXT__ETC___d237 =
	      result__h11709;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_SEXT__ETC___d237 =
	      result__h11737;
      3'h5:
	  IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_SEXT__ETC___d237 =
	      result__h11765;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_SEXT__ETC___d237 =
	      result__h11793;
      3'h7:
	  IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_SEXT__ETC___d237 =
	      result__h11821;
    endcase
  end
  always@(rg_addr or ram_word64_set$DOB or rg_st_amo_val)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_ram_w_ETC___d119 =
	      { ram_word64_set$DOB[63:8], rg_st_amo_val[7:0] };
      3'h1:
	  IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_ram_w_ETC___d119 =
	      { ram_word64_set$DOB[63:16],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[7:0] };
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_ram_w_ETC___d119 =
	      { ram_word64_set$DOB[63:24],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[15:0] };
      3'h3:
	  IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_ram_w_ETC___d119 =
	      { ram_word64_set$DOB[63:32],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[23:0] };
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_ram_w_ETC___d119 =
	      { ram_word64_set$DOB[63:40],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[31:0] };
      3'h5:
	  IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_ram_w_ETC___d119 =
	      { ram_word64_set$DOB[63:48],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[39:0] };
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_ram_w_ETC___d119 =
	      { ram_word64_set$DOB[63:56],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[47:0] };
      3'h7:
	  IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_ram_w_ETC___d119 =
	      { rg_st_amo_val[7:0], ram_word64_set$DOB[55:0] };
    endcase
  end
  always@(rg_addr or
	  result__h12232 or
	  result__h12260 or result__h12288 or result__h12316)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_0_CON_ETC___d275 =
	      result__h12232;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_0_CON_ETC___d275 =
	      result__h12260;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_0_CON_ETC___d275 =
	      result__h12288;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_0_CON_ETC___d275 =
	      result__h12316;
      default: IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_0_CON_ETC___d275 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h11866 or
	  result__h11894 or
	  result__h11922 or
	  result__h11950 or
	  result__h11978 or
	  result__h12006 or result__h12034 or result__h12062)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_0_CON_ETC___d254 =
	      result__h11866;
      3'h1:
	  IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_0_CON_ETC___d254 =
	      result__h11894;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_0_CON_ETC___d254 =
	      result__h11922;
      3'h3:
	  IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_0_CON_ETC___d254 =
	      result__h11950;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_0_CON_ETC___d254 =
	      result__h11978;
      3'h5:
	  IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_0_CON_ETC___d254 =
	      result__h12006;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_0_CON_ETC___d254 =
	      result__h12034;
      3'h7:
	  IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_0_CON_ETC___d254 =
	      result__h12062;
    endcase
  end
  always@(rg_addr or ram_word64_set$DOB or rg_st_amo_val)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q24 =
	      { ram_word64_set$DOB[63:32], rg_st_amo_val[31:0] };
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q24 =
	      { rg_st_amo_val[31:0], ram_word64_set$DOB[31:0] };
      default: CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q24 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_f3 or
	  ram_word64_set$DOB or
	  IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_ram_w_ETC___d119 or
	  IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_ram_w_ETC___d129 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q24 or
	  rg_st_amo_val)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_8_EQ_0b0_9_THEN_IF_rg_addr_7_BITS_2_T_ETC___d140 =
	      IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_ram_w_ETC___d119;
      3'b001:
	  IF_rg_f3_8_EQ_0b0_9_THEN_IF_rg_addr_7_BITS_2_T_ETC___d140 =
	      IF_rg_addr_7_BITS_2_TO_0_7_EQ_0x0_0_THEN_ram_w_ETC___d129;
      3'b010:
	  IF_rg_f3_8_EQ_0b0_9_THEN_IF_rg_addr_7_BITS_2_T_ETC___d140 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q24;
      3'b011:
	  IF_rg_f3_8_EQ_0b0_9_THEN_IF_rg_addr_7_BITS_2_T_ETC___d140 =
	      rg_st_amo_val;
      default: IF_rg_f3_8_EQ_0b0_9_THEN_IF_rg_addr_7_BITS_2_T_ETC___d140 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_addr or result__h12357 or result__h12385)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result2357_0x4_re_ETC__q25 =
	      result__h12357;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result2357_0x4_re_ETC__q25 =
	      result__h12385;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result2357_0x4_re_ETC__q25 =
		   64'd0;
    endcase
  end
  always@(rg_addr or result__h12424 or result__h12452)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result2424_0x4_re_ETC__q26 =
	      result__h12424;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result2424_0x4_re_ETC__q26 =
	      result__h12452;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result2424_0x4_re_ETC__q26 =
		   64'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY 4'd0;
	master_xactor_crg_rd_addr_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	master_xactor_crg_rd_data_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	master_xactor_crg_wr_addr_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	master_xactor_crg_wr_data_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	master_xactor_crg_wr_resp_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY 7'd0;
	rg_lower_word32_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_requesting_cline <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (ctr_wr_rsps_pending_crg$EN)
	  ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY
	      ctr_wr_rsps_pending_crg$D_IN;
	if (master_xactor_crg_rd_addr_full$EN)
	  master_xactor_crg_rd_addr_full <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_crg_rd_addr_full$D_IN;
	if (master_xactor_crg_rd_data_full$EN)
	  master_xactor_crg_rd_data_full <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_crg_rd_data_full$D_IN;
	if (master_xactor_crg_wr_addr_full$EN)
	  master_xactor_crg_wr_addr_full <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_crg_wr_addr_full$D_IN;
	if (master_xactor_crg_wr_data_full$EN)
	  master_xactor_crg_wr_data_full <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_crg_wr_data_full$D_IN;
	if (master_xactor_crg_wr_resp_full$EN)
	  master_xactor_crg_wr_resp_full <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_crg_wr_resp_full$D_IN;
	if (rg_cset_in_cache$EN)
	  rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY rg_cset_in_cache$D_IN;
	if (rg_lower_word32_full$EN)
	  rg_lower_word32_full <= `BSV_ASSIGNMENT_DELAY
	      rg_lower_word32_full$D_IN;
	if (rg_requesting_cline$EN)
	  rg_requesting_cline <= `BSV_ASSIGNMENT_DELAY
	      rg_requesting_cline$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
      end
    if (master_xactor_rg_rd_addr$EN)
      master_xactor_rg_rd_addr <= `BSV_ASSIGNMENT_DELAY
	  master_xactor_rg_rd_addr$D_IN;
    if (master_xactor_rg_rd_data$EN)
      master_xactor_rg_rd_data <= `BSV_ASSIGNMENT_DELAY
	  master_xactor_rg_rd_data$D_IN;
    if (master_xactor_rg_wr_addr$EN)
      master_xactor_rg_wr_addr <= `BSV_ASSIGNMENT_DELAY
	  master_xactor_rg_wr_addr$D_IN;
    if (master_xactor_rg_wr_data$EN)
      master_xactor_rg_wr_data <= `BSV_ASSIGNMENT_DELAY
	  master_xactor_rg_wr_data$D_IN;
    if (master_xactor_rg_wr_resp$EN)
      master_xactor_rg_wr_resp <= `BSV_ASSIGNMENT_DELAY
	  master_xactor_rg_wr_resp$D_IN;
    if (rg_addr$EN) rg_addr <= `BSV_ASSIGNMENT_DELAY rg_addr$D_IN;
    if (rg_error_during_refill$EN)
      rg_error_during_refill <= `BSV_ASSIGNMENT_DELAY
	  rg_error_during_refill$D_IN;
    if (rg_exc_code$EN) rg_exc_code <= `BSV_ASSIGNMENT_DELAY rg_exc_code$D_IN;
    if (rg_f3$EN) rg_f3 <= `BSV_ASSIGNMENT_DELAY rg_f3$D_IN;
    if (rg_ld_val$EN) rg_ld_val <= `BSV_ASSIGNMENT_DELAY rg_ld_val$D_IN;
    if (rg_lower_word32$EN)
      rg_lower_word32 <= `BSV_ASSIGNMENT_DELAY rg_lower_word32$D_IN;
    if (rg_op$EN) rg_op <= `BSV_ASSIGNMENT_DELAY rg_op$D_IN;
    if (rg_pa$EN) rg_pa <= `BSV_ASSIGNMENT_DELAY rg_pa$D_IN;
    if (rg_pte_pa$EN) rg_pte_pa <= `BSV_ASSIGNMENT_DELAY rg_pte_pa$D_IN;
    if (rg_req_byte_in_cline$EN)
      rg_req_byte_in_cline <= `BSV_ASSIGNMENT_DELAY rg_req_byte_in_cline$D_IN;
    if (rg_st_amo_val$EN)
      rg_st_amo_val <= `BSV_ASSIGNMENT_DELAY rg_st_amo_val$D_IN;
    if (rg_word64_set_in_cache$EN)
      rg_word64_set_in_cache <= `BSV_ASSIGNMENT_DELAY
	  rg_word64_set_in_cache$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_verbosity = 4'hA;
    ctr_wr_rsps_pending_crg = 4'hA;
    master_xactor_crg_rd_addr_full = 1'h0;
    master_xactor_crg_rd_data_full = 1'h0;
    master_xactor_crg_wr_addr_full = 1'h0;
    master_xactor_crg_wr_data_full = 1'h0;
    master_xactor_crg_wr_resp_full = 1'h0;
    master_xactor_rg_rd_addr = 67'h2AAAAAAAAAAAAAAAA;
    master_xactor_rg_rd_data = 66'h2AAAAAAAAAAAAAAAA;
    master_xactor_rg_wr_addr = 67'h2AAAAAAAAAAAAAAAA;
    master_xactor_rg_wr_data = 72'hAAAAAAAAAAAAAAAAAA;
    master_xactor_rg_wr_resp = 2'h2;
    rg_addr = 32'hAAAAAAAA;
    rg_cset_in_cache = 7'h2A;
    rg_error_during_refill = 1'h0;
    rg_exc_code = 4'hA;
    rg_f3 = 3'h2;
    rg_ld_val = 64'hAAAAAAAAAAAAAAAA;
    rg_lower_word32 = 32'hAAAAAAAA;
    rg_lower_word32_full = 1'h0;
    rg_op = 1'h0;
    rg_pa = 32'hAAAAAAAA;
    rg_pte_pa = 32'hAAAAAAAA;
    rg_req_byte_in_cline = 64'hAAAAAAAAAAAAAAAA;
    rg_requesting_cline = 1'h0;
    rg_st_amo_val = 64'hAAAAAAAAAAAAAAAA;
    rg_state = 4'hA;
    rg_word64_set_in_cache = 9'h0AA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 &&
	  cfg_verbosity != 4'd0 &&
	  !f_reset_reqs$D_OUT)
	begin
	  v__h3846 = $stime;
	  #0;
	end
    v__h3840 = v__h3846 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 &&
	  cfg_verbosity != 4'd0 &&
	  !f_reset_reqs$D_OUT)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		   v__h3840,
		   "D_MMU_Cache",
		   $signed(32'd128),
		   $signed(32'd1));
	else
	  $display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		   v__h3840,
		   "I_MMU_Cache",
		   $signed(32'd128),
		   $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  f_reset_reqs$D_OUT)
	begin
	  v__h3947 = $stime;
	  #0;
	end
    v__h3941 = v__h3947 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  f_reset_reqs$D_OUT)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_reset: Flushed", v__h3941, "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_reset: Flushed", v__h3941, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_rereq && NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    fa_req_ram_B tagCSet [0x%0x] word64_set [0x%0d]",
		 rg_addr[11:5],
		 rg_addr[11:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h18951 = $stime;
	  #0;
	end
    v__h18945 = v__h18951 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_near_mem_read_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h18945,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_near_mem_read_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h18945,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    ", { 1'd1, value__h21171, 72'hAAAAAAAAAAAAAAAAAA });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h19136 = $stime;
	  #0;
	end
    v__h19130 = v__h19136 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_near_mem_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h19130,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_near_mem_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h19130,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("Near_Mem_IO_Rsp { ", "read_not_write: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "ok: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  f_near_mem_io_rsps$D_OUT[64])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  !f_near_mem_io_rsps$D_OUT[64])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", f_near_mem_io_rsps$D_OUT[63:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  f_near_mem_io_rsps$D_OUT[64] &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h19538 = $stime;
	  #0;
	end
    v__h19532 = v__h19538 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  f_near_mem_io_rsps$D_OUT[64] &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h19532,
		   "D_MMU_Cache",
		   rg_addr,
		   f_near_mem_io_rsps$D_OUT[63:0]);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h19532,
		   "I_MMU_Cache",
		   rg_addr,
		   f_near_mem_io_rsps$D_OUT[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  !f_near_mem_io_rsps$D_OUT[64] &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h19645 = $stime;
	  #0;
	end
    v__h19639 = v__h19645 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  !f_near_mem_io_rsps$D_OUT[64] &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_near_mem_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		   v__h19639,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_io_near_mem_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		   v__h19639,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_maintain_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h19926 = $stime;
	  #0;
	end
    v__h19920 = v__h19926 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_maintain_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h19920,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_ld_val);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h19920,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_ld_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h21113 = $stime;
	  #0;
	end
    v__h21107 = v__h21113 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_near_mem_write_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h21107,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_near_mem_write_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h21107,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("Near_Mem_IO_Req { ", "read_not_write: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", value__h21171);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", value__h21173);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", req_wstrb__h20756, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h21255 = $stime;
	  #0;
	end
    v__h21249 = v__h21255 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_near_mem_write_rsp",
		   v__h21249,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_io_near_mem_write_rsp",
		   v__h21249,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("Near_Mem_IO_Rsp { ", "read_not_write: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "ok: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  f_near_mem_io_rsps$D_OUT[64])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  !f_near_mem_io_rsps$D_OUT[64])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", f_near_mem_io_rsps$D_OUT[63:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_reset &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h3481 = $stime;
	  #0;
	end
    v__h3475 = v__h3481 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_reset &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_start_reset", v__h3475, "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_start_reset", v__h3475, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_26___d327)
	begin
	  v__h15983 = $stime;
	  #0;
	end
    v__h15977 = v__h15983 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_26___d327)
	if (dmem_not_imem)
	  $write("%0d: %s.rl_cache_refill_req_loop: mem req: ",
		 v__h15977,
		 "D_MMU_Cache");
	else
	  $write("%0d: %s.rl_cache_refill_req_loop: mem req: ",
		 v__h15977,
		 "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_26___d327)
	$write("AXI4_Lite_Rd_Addr { ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_26___d327)
	$write("'h%h", cline_fabric_addr__h15817);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_26___d327)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_26___d327)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_26___d327)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_26___d327)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_26___d327)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h4096 = $stime;
	  #0;
	end
    v__h4090 = v__h4096 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		   v__h4090,
		   "D_MMU_Cache",
		   rg_addr);
	else
	  $display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		   v__h4090,
		   "I_MMU_Cache",
		   rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("        eaddr = {CTag 0x%0h  CSet 0x%0h  Word64 0x%0h  Byte 0x%0h}",
		 pa_ctag__h4948,
		 rg_addr[11:5],
		 rg_addr[4:3],
		 rg_addr[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("        CSet 0x%0x: (state, tag):", rg_addr[11:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(" (");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  ram_state_and_ctag_cset$DOB[22])
	$write("CTAG_CLEAN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  !ram_state_and_ctag_cset$DOB[22])
	$write("CTAG_EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  ram_state_and_ctag_cset$DOB[22])
	$write(", 0x%0x", ram_state_and_ctag_cset$DOB[21:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  !ram_state_and_ctag_cset$DOB[22])
	$write(", --");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(")");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:5],
	       rg_addr[4:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(" 0x%0x", ram_word64_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("    TLB result: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("VM_Xlate_Result { ", "outcome: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("VM_XLATE_OK");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "pa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 4'hA, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && soc_map$m_is_IO_addr &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    => IO_REQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op_0_AND_ram_state_and_ctag_cset_b_read__8__ETC___d142)
	$display("        Write-Cache-Hit: pa 0x%0h word64 0x%0h",
		 rg_addr,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op_0_AND_ram_state_and_ctag_cset_b_read__8__ETC___d142)
	$write("        New Word64_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op_0_AND_ram_state_and_ctag_cset_b_read__8__ETC___d142)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:5],
	       rg_addr[4:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op_0_AND_ram_state_and_ctag_cset_b_read__8__ETC___d142)
	$write(" 0x%0x",
	       IF_rg_f3_8_EQ_0b0_9_THEN_IF_rg_addr_7_BITS_2_T_ETC___d140);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op_0_AND_ram_state_and_ctag_cset_b_read__8__ETC___d142)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op &&
	  (!ram_state_and_ctag_cset$DOB[22] ||
	   !ram_state_and_ctag_cset_b_read__8_BITS_21_TO_0_ETC___d65) &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("        Write-Cache-Miss: pa 0x%0h word64 0x%0h",
		 rg_addr,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op &&
	  ctr_wr_rsps_pending_crg == 4'd15)
	begin
	  v__h14839 = $stime;
	  #0;
	end
    v__h14833 = v__h14839 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op &&
	  ctr_wr_rsps_pending_crg == 4'd15)
	$display("%0d: ERROR: CreditCounter: overflow", v__h14833);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op &&
	  ctr_wr_rsps_pending_crg == 4'd15)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("        Write-Hit/Miss: eaddr 0x%0h word64 0x%0h",
		 rg_addr,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("AXI4_Lite_Wr_Addr { ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", mem_req_wr_addr_awaddr__h14382);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("AXI4_Lite_Wr_Data { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", mem_req_wr_data_wdata__h14493);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", mem_req_wr_data_wstrb__h14494, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    => rl_write_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_1_AND_ram_state_and_ctag_cset_b_re_ETC___d295)
	begin
	  v__h12536 = $stime;
	  #0;
	end
    v__h12530 = v__h12536 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_1_AND_ram_state_and_ctag_cset_b_re_ETC___d295)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h12530,
		   "D_MMU_Cache",
		   rg_addr,
		   word64__h5090,
		   64'd0);
	else
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h12530,
		   "I_MMU_Cache",
		   rg_addr,
		   word64__h5090,
		   64'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_1_AND_ram_state_and_ctag_cset_b_re_ETC___d295)
	$display("        Read-hit: addr 0x%0h word64 0x%0h",
		 rg_addr,
		 word64__h5090);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  !rg_op &&
	  (!ram_state_and_ctag_cset$DOB[22] ||
	   !ram_state_and_ctag_cset_b_read__8_BITS_21_TO_0_ETC___d65) &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("        Read Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_26___d327)
	begin
	  v__h16133 = $stime;
	  #0;
	end
    v__h16127 = v__h16133 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_26___d327)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_cache_refill_rsps_loop:",
		   v__h16127,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_cache_refill_rsps_loop:",
		   v__h16127,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_26___d327)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_26___d327)
	$write("AXI4_Lite_Rd_Data { ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_26___d327 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0)
	$write("AXI4_LITE_OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_26___d327 &&
	  master_xactor_rg_rd_data[65:64] == 2'd1)
	$write("AXI4_LITE_EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_26___d327 &&
	  master_xactor_rg_rd_data[65:64] == 2'd2)
	$write("AXI4_LITE_SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_26___d327 &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  master_xactor_rg_rd_data[65:64] != 2'd1 &&
	  master_xactor_rg_rd_data[65:64] != 2'd2)
	$write("AXI4_LITE_DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_26___d327)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_26___d327)
	$write("'h%h", master_xactor_rg_rd_data[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_26___d327)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_26___d327)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_26___d327)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h16380 = $stime;
	  #0;
	end
    v__h16374 = v__h16380 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		   v__h16374,
		   "D_MMU_Cache",
		   access_exc_code__h3039);
	else
	  $display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		   v__h16374,
		   "I_MMU_Cache",
		   access_exc_code__h3039);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  rg_word64_set_in_cache[1:0] == 2'd3 &&
	  (master_xactor_rg_rd_data[65:64] != 2'd0 ||
	   rg_error_during_refill) &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    => MODULE_EXCEPTION_RSP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  rg_word64_set_in_cache[1:0] == 2'd3 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !rg_error_during_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    => CACHE_REREQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_26___d327)
	$display("        Updating Cache [0x%0x] (Word64_Set %0d) old => new",
		 rg_word64_set_in_cache,
		 rg_word64_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_26___d327)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:5],
	       rg_word64_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_26___d327)
	$write(" 0x%0x", ram_word64_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_26___d327)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_26___d327)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:5],
	       rg_word64_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_26___d327)
	$write(" 0x%0x", master_xactor_rg_rd_data[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_26___d327)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h18102 = $stime;
	  #0;
	end
    v__h18096 = v__h18102 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_read_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h18096,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_read_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h18096,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    ", { value__h21171, 3'd0 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h18267 = $stime;
	  #0;
	end
    v__h18261 = v__h18267 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h18261,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h18261,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("AXI4_Lite_Rd_Data { ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0)
	$write("AXI4_LITE_OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  master_xactor_rg_rd_data[65:64] == 2'd1)
	$write("AXI4_LITE_EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  master_xactor_rg_rd_data[65:64] == 2'd2)
	$write("AXI4_LITE_SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  master_xactor_rg_rd_data[65:64] != 2'd1 &&
	  master_xactor_rg_rd_data[65:64] != 2'd2)
	$write("AXI4_LITE_DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", master_xactor_rg_rd_data[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h18666 = $stime;
	  #0;
	end
    v__h18660 = v__h18666 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h18660,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0]);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h18660,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h18773 = $stime;
	  #0;
	end
    v__h18767 = v__h18773 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		   v__h18767,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		   v__h18767,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && ctr_wr_rsps_pending_crg == 4'd15)
	begin
	  v__h20448 = $stime;
	  #0;
	end
    v__h20442 = v__h20448 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && ctr_wr_rsps_pending_crg == 4'd15)
	$display("%0d: ERROR: CreditCounter: overflow", v__h20442);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && ctr_wr_rsps_pending_crg == 4'd15)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h20593 = $stime;
	  #0;
	end
    v__h20587 = v__h20593 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_write_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h20587,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_write_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h20587,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("AXI4_Lite_Wr_Addr { ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", io_req_wr_addr_awaddr__h20047);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("AXI4_Lite_Wr_Data { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", value__h21173);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", req_wstrb__h20756, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h22235 = $stime;
	  #0;
	end
    v__h22229 = v__h22235 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $write("%0d: %s.req: op:", v__h22229, "D_MMU_Cache");
	else
	  $write("%0d: %s.req: op:", v__h22229, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d12 && req_op)
	$write("CACHE_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d12 && !req_op)
	$write("CACHE_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(" f3:%0d addr:0x%0h st_value:0x%0h priv:",
	       req_f3,
	       req_addr,
	       req_st_value);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  req_priv == 2'b0)
	$write("U");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  req_priv == 2'b01)
	$write("S");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  req_priv == 2'b11)
	$write("M");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  req_priv != 2'b0 &&
	  req_priv != 2'b01 &&
	  req_priv != 2'b11)
	$write("RESERVED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(" sstatus_SUM:%0d mstatus_MXR:%0d satp:0x%0h",
	       req_sstatus_SUM,
	       req_mstatus_MXR,
	       req_satp,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req &&
	  req_f3_BITS_1_TO_0_47_EQ_0b0_48_OR_req_f3_BITS_ETC___d577 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    fa_req_ram_B tagCSet [0x%0x] word64_set [0x%0d]",
		 req_addr[11:5],
		 req_addr[11:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h15763 = $stime;
	  #0;
	end
    v__h15757 = v__h15763 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $write("%0d: %s.rl_start_cache_refill: mem req: ",
		 v__h15757,
		 "D_MMU_Cache");
	else
	  $write("%0d: %s.rl_start_cache_refill: mem req: ",
		 v__h15757,
		 "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("AXI4_Lite_Rd_Addr { ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", { 32'd0, cline_addr__h15816 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    Victim way is %0d; => CACHE_REFILL", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h21848 = $stime;
	  #0;
	end
    v__h21842 = v__h21848 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $write("%0d: %s.rl_discard_write_rsp: pending %0d ",
		 v__h21842,
		 "D_MMU_Cache",
		 $unsigned(b__h15106));
	else
	  $write("%0d: %s.rl_discard_write_rsp: pending %0d ",
		 v__h21842,
		 "I_MMU_Cache",
		 $unsigned(b__h15106));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("AXI4_Lite_Wr_Resp { ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("AXI4_LITE_OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	begin
	  v__h21809 = $stime;
	  #0;
	end
    v__h21803 = v__h21809 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_discard_write_rsp: fabric response error: exit",
		   v__h21803,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_discard_write_rsp: fabric response error: exit",
		   v__h21803,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	$write("AXI4_Lite_Wr_Resp { ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd1)
	$write("AXI4_LITE_EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd2)
	$write("AXI4_LITE_SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0 &&
	  master_xactor_rg_wr_resp != 2'd1 &&
	  master_xactor_rg_wr_resp != 2'd2)
	$write("AXI4_LITE_DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	$finish(32'd1);
  end
  // synopsys translate_on
endmodule  // mkMMU_Cache

